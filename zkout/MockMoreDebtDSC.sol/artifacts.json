{
  "contracts": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "Ownable": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "transferOwnership(address)": "f2fde38b"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "IERC1155Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC1155InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "idsLength",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "valuesLength",
                "type": "uint256"
              }
            ],
            "name": "ERC1155InvalidArrayLength",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidOperator",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC1155MissingApprovalForAll",
            "type": "error"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      },
      "IERC20Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      },
      "IERC721Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC721IncorrectOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC721InsufficientApproval",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidOperator",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC721NonexistentToken",
            "type": "error"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "ERC20": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "IERC20": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "ERC20Burnable": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "burnFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "burn(uint256)": "42966c68",
            "burnFrom(address,uint256)": "79cc6790",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "IERC20Metadata": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "irOptimized": ""
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "Context": {
        "abi": [],
        "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
        "evm": {
          "legacyAssembly": null,
          "assembly": null,
          "bytecode": null,
          "methodIdentifiers": {}
        },
        "irOptimized": ""
      }
    },
    "test/mocks/MockMoreDebtDSC.sol": {
      "MockMoreDebtDSC": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_mockAggregator",
                "type": "address"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [],
            "name": "DecentralizedStableCoin__AmountMustBeMoreThanZero",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "DecentralizedStableCoin__BurnAmountExceedsBalance",
            "type": "error"
          },
          {
            "inputs": [],
            "name": "DecentralizedStableCoin__NotZeroAddress",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "burn",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "burnFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "mint",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mockAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DecentralizedStableCoin__AmountMustBeMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecentralizedStableCoin__BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecentralizedStableCoin__NotZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/MockMoreDebtDSC.sol\":\"MockMoreDebtDSC\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"test/mocks/MockMoreDebtDSC.sol\":{\"keccak256\":\"0x239834cd0bda7a2ec8420857939fefdc542d1ae1b4b30a803dd6fa38c0940c16\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7409e162f89177fd578cc13b54adb3be4b96a99f5eb58c3a5f519ad8bc54b41\",\"dweb:/ipfs/Qmdcmyc7esPt1h5CStFKF13NurVdifVjkYKqR1XyiRd3u1\"]},\"test/mocks/MockV3Aggregator.sol\":{\"keccak256\":\"0xf5aeb38ff6e828fdf348fc48e1c224d4d40456a027ea8a8c73b387fd1c6fece8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c521efdee62df25368b477537d7b7481402a5b651fa37baaf4dcce7f0dca2d6a\",\"dweb:/ipfs/QmcPqKS4amddY7fjh3Wtw5zrNWUqEH7yS6MkdT9azcxss8\"]}},\"version\":1}",
          "solc_version": "0.8.24",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.0"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"MockMoreDebtDSC.sol:MockMoreDebtDSC\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.le\t@.BB0_57\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.gt\t@.BB0_72\n\tsub.s!\t@CPI0_23[0], r2, r4\n\tjump.gt\t@.BB0_70\n\tsub.s!\t@CPI0_26[0], r2, r4\n\tjump.eq\t@.BB0_147\n\tsub.s!\t@CPI0_27[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t5, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_4[0], r2, r3\n\tcontext.caller\tr5\n\tsub!\tr3, r5, r3\n\tjump.ne\t@.BB0_154\n\tand\t@CPI0_10[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_12[0], r0, r4\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_156\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_1[0], r3, r2\n\tsub.s!\t@CPI0_2[0], r2, r2\n\tjump.gt\t@.BB0_6\n.BB0_4:\n\tadd\t@CPI0_49[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n.BB0_5:\n\tst.1\t4, r1\n\tadd\t@CPI0_15[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_6:\n\tadd\t159, r3, r2\n\tand\t@CPI0_3[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tjump.eq\t@.BB0_192\n\tadd\tr0, r0, r5\n.BB0_8:\n\tshl.s\t5, r5, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tadd\t128, r6, r6\n\tst.1\tr6, r7\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_8\n.BB0_192:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_10\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r2, r2\n\tadd\t128, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_10:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r6\n\tsub.s!\t@CPI0_4[0], r6, r1\n\tjump.gt\t@.BB0_2\n\tld.1\t64, r8\n\tsub.s!\t@CPI0_5[0], r8, r1\n\tjump.gt\t@.BB0_4\n\tadd\t64, r8, r1\n\tst.1\t64, r1\n\tadd\t23, r0, r1\n\tst.1.inc\tr8, r1, r10\n\tadd\t@CPI0_6[0], r0, r1\n\tst.1\tr10, r1\n\tld.1\t64, r7\n\tsub.s!\t@CPI0_5[0], r7, r1\n\tjump.gt\t@.BB0_4\n\tadd\t64, r7, r1\n\tst.1\t64, r1\n\tadd\t3, r0, r5\n\tst.1.inc\tr7, r5, r4\n\tadd\t@CPI0_7[0], r0, r1\n\tst.1\tr4, r1\n\tld.1\tr8, r9\n\tsub.s!\t@CPI0_8[0], r9, r1\n\tjump.gt\t@.BB0_4\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tand\t1, r1, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_16\n\tsub.s!\t32, r3, r1\n\tadd\tr7, r0, stack-[7]\n\tadd\tr6, r0, stack-[8]\n\tadd\tr4, r0, stack-[6]\n\tjump.lt\t@.BB0_21\n\tadd\tr3, r0, stack-[1]\n\tadd\tr10, r0, stack-[2]\n\tadd\tr9, r0, stack-[3]\n\tadd\tr8, r0, stack-[4]\n\tadd\tr5, r0, stack-[5]\n\tst.1\t0, r5\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[3], r0, r9\n\tadd\t31, r9, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r9, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[1], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[6], r0, r4\n\tadd\tstack-[5], r0, r5\n\tadd\tstack-[4], r0, r8\n\tadd\tstack-[2], r0, r10\n\tjump.ge\t@.BB0_21\n.BB0_22:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_22\n.BB0_21:\n\tsub.s!\t31, r9, r1\n\tjump.le\t@.BB0_31\n\tadd\tr9, r0, stack-[3]\n\tadd\tr8, r0, stack-[4]\n\tadd\tr5, r0, stack-[5]\n\tst.1\t0, r5\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tadd\tstack-[3], r0, r9\n\tand!\tr9, r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r7\n\tadd\tstack-[4], r0, r8\n\tjump.eq\t@.BB0_28\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_27:\n\tadd\tr2, r8, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_27\n.BB0_28:\n\tsub!\tr3, r9, r3\n\tjump.ge\t@.BB0_30\n\tshl.s\t3, r9, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tr2, r8, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_30:\n\tshl.s\t1, r9, r1\n\tor\t1, r1, r1\n\tadd\tstack-[6], r0, r4\n\tadd\tstack-[5], r0, r5\n\tjump\t@.BB0_23\n.BB0_57:\n\tsub.s!\t@CPI0_28[0], r2, r4\n\tjump.le\t@.BB0_58\n\tsub.s!\t@CPI0_29[0], r2, r4\n\tjump.gt\t@.BB0_64\n\tsub.s!\t@CPI0_32[0], r2, r4\n\tjump.eq\t@.BB0_102\n\tsub.s!\t@CPI0_33[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t18, r0, r1\n\tjump\t@.BB0_109\n.BB0_72:\n\tsub.s!\t@CPI0_18[0], r2, r4\n\tjump.gt\t@.BB0_75\n\tsub.s!\t@CPI0_21[0], r2, r4\n\tjump.eq\t@.BB0_164\n\tsub.s!\t@CPI0_22[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r3\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tjump\t@.BB0_177\n.BB0_58:\n\tsub.s!\t@CPI0_34[0], r2, r4\n\tjump.eq\t@.BB0_77\n\tsub.s!\t@CPI0_35[0], r2, r4\n\tjump.eq\t@.BB0_86\n\tsub.s!\t@CPI0_36[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tjump\t@.BB0_101\n.BB0_70:\n\tsub.s!\t@CPI0_24[0], r2, r4\n\tjump.eq\t@.BB0_158\n\tsub.s!\t@CPI0_25[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t5, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_4[0], r1, r1\n\tjump\t@.BB0_109\n.BB0_64:\n\tsub.s!\t@CPI0_30[0], r2, r4\n\tjump.eq\t@.BB0_110\n\tsub.s!\t@CPI0_31[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r2\n\tadd\t5, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_4[0], r1, r1\n\tcontext.caller\tr3\n\tsub!\tr1, r3, r1\n\tjump.ne\t@.BB0_127\n\tadd\tr3, r0, stack-[7]\n\tadd\tr2, r0, stack-[6]\n\tadd\t6, r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_42[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_4[0], r1, r1\n\tadd\tr1, r0, stack-[8]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_43[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_129\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r5\n\tadd\t@CPI0_44[0], r0, r1\n\tst.1\tr5, r1\n\tadd\t4, r5, r1\n\tst.1\tr1, r0\n\tcontext.gas_left\tr1\n\tadd\tstack-[8], r0, r2\n\tsub.s!\t4, r2, r3\n\tjump.eq\t@.BB0_138\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_15[0], r1, r1\n\tadd\tr5, r0, stack-[8]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_133\n.BB0_138:\n\tsub.s!\t@CPI0_8[0], r5, r1\n\tjump.gt\t@.BB0_4\n\tst.1\t64, r5\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[6], r0, r2\n\tsub!\tr2, r0, r3\n\tjump.ne\t@.BB0_143\n\tld.1\t64, r1\n\tadd\t@CPI0_48[0], r0, r2\n\tjump\t@.BB0_142\n.BB0_75:\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_178\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r6\n\tsub.s!\t@CPI0_4[0], r6, r1\n\tjump.gt\t@.BB0_2\n\tadd\t5, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_4[0], r2, r3\n\tcontext.caller\tr5\n\tsub!\tr3, r5, r3\n\tjump.ne\t@.BB0_187\n\tsub!\tr6, r0, r3\n\tjump.ne\t@.BB0_190\n\tadd\t@CPI0_14[0], r0, r1\n\tjump\t@.BB0_91\n.BB0_147:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t32, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tjump\t@.BB0_151\n.BB0_102:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t96, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r5\n\tsub.s!\t@CPI0_4[0], r5, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_4[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r3\n\tadd\tr3, r0, stack-[8]\n\tcontext.caller\tr2\n\tadd\tr5, r0, r1\n\tadd\tr5, r0, stack-[7]\n\tadd\tr4, r0, stack-[6]\n\tnear_call\tr0, @fun_spendAllowance, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r1\n\tadd\tstack-[6], r0, r2\n\tadd\tstack-[8], r0, r3\n.BB0_177:\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tadd\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_40[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_164:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t4, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_16\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_169\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t192, r0, r2\n\tadd.eq\t160, r0, r2\n\tjump\t@.BB0_167\n.BB0_77:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r4\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r1\n\tadd.ne\tr5, r0, r1\n\tsub.s!\t31, r1, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_79\n.BB0_16:\n\tadd\t@CPI0_49[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_5\n.BB0_86:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_4[0], r3, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r4\n\tcontext.caller\tr2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_92\n\tadd\t@CPI0_55[0], r0, r1\n\tjump\t@.BB0_91\n.BB0_158:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_4[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tadd\tr3, r0, stack-[7]\n\tcontext.caller\tr2\n\tadd\tr4, r0, r1\n\tadd\tr4, r0, stack-[8]\n\tnear_call\tr0, @fun_spendAllowance, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r1\n\tadd\tstack-[7], r0, r2\n.BB0_146:\n\tnear_call\tr0, @fun_burn, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_110:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_4[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tadd\t5, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_4[0], r1, r2\n\tcontext.caller\tr1\n\tsub!\tr2, r1, r2\n\tjump.ne\t@.BB0_114\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_118\n\tadd\t@CPI0_52[0], r0, r1\n\tjump\t@.BB0_117\n.BB0_178:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r3, r2\n\tsub.s!\t64, r2, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_4[0], r2, r3\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_4[0], r3, r1\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[7]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[8], r0, r2\n.BB0_151:\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n.BB0_101:\n\tsload\tr1, r1\n.BB0_109:\n\tst.1\t128, r1\n\tadd\t@CPI0_39[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_127:\n\tadd\t@CPI0_37[0], r0, r1\n\tst.1\t128, r1\n\tst.1\t132, r3\n\tadd\t@CPI0_38[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_79:\n\tst.1\t128, r1\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_82\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tst.1\t160, r2\n\tsub!\tr1, r0, r1\n\tadd\t192, r0, r2\n\tadd.eq\t160, r0, r2\n\tjump\t@.BB0_80\n.BB0_129:\n\trevert\n.BB0_187:\n.BB0_154:\n\tadd\t@CPI0_37[0], r0, r1\n\tst.1\t128, r1\n\tst.1\t132, r5\n\tadd\t@CPI0_38[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_169:\n\tst.1\t0, r3\n\tadd\t160, r0, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_167\n\tadd\t@CPI0_41[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_171:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_171\n\tadd\t192, r3, r2\n.BB0_167:\n\tjump\t@.BB0_80\n.BB0_92:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_94\n\tadd\t@CPI0_54[0], r0, r1\n.BB0_91:\n\tst.1\t128, r1\n\tst.1\t132, r0\n\tadd\t@CPI0_38[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_114:\n\tadd\t@CPI0_37[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_82:\n\tst.1\t0, r3\n\tadd\t160, r0, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_80\n\tadd\t@CPI0_56[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_84:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_84\n\tadd\t192, r3, r2\n.BB0_80:\n\tsub.s\t128, r2, r2\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[8]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_190:\n\tand\t@CPI0_10[0], r2, r2\n\tor\tr2, r6, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_12[0], r0, r4\n.BB0_156:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_118:\n\tsub!\tr5, r0, r1\n\tjump.ne\t@.BB0_120\n\tadd\t@CPI0_48[0], r0, r1\n.BB0_117:\n\tst.1\t128, r1\n\tadd\t@CPI0_51[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_94:\n\tadd\tr4, r0, stack-[6]\n\tadd\tr2, r0, stack-[7]\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tst.1\t0, r3\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tadd\tstack-[6], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_53[0], r0, r4\n\tadd\tstack-[7], r0, r5\n\tjump\t@.BB0_97\n.BB0_31:\n\tsub!\tr9, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_33\n\tld.1\tr10, r1\n.BB0_33:\n\tshl.s\t3, r9, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r9, r2\n\tor\tr1, r2, r1\n.BB0_23:\n\tsstore\tr5, r1\n\tld.1\tr7, r7\n\tsub.s!\t@CPI0_8[0], r7, r1\n\tjump.gt\t@.BB0_4\n\tadd\t4, r0, r5\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_16\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_39\n\tadd\tr3, r0, stack-[3]\n\tadd\tr7, r0, stack-[5]\n\tadd\tr5, r0, stack-[4]\n\tst.1\t0, r5\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[5], r0, r7\n\tadd\t31, r7, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r7, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[6], r0, r4\n\tadd\tstack-[4], r0, r5\n\tjump.ge\t@.BB0_39\n.BB0_40:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_40\n.BB0_39:\n\tsub.s!\t31, r7, r1\n\tjump.le\t@.BB0_49\n\tadd\tr7, r0, stack-[5]\n\tadd\tr5, r0, stack-[4]\n\tst.1\t0, r5\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tsub.s\t32, r0, r2\n\tand!\tstack-[5], r2, r3\n\tadd\t32, r0, r2\n\tld\tr1, r1\n\tadd\tstack-[7], r0, r6\n\tjump.eq\t@.BB0_46\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n.BB0_45:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_45\n.BB0_46:\n\tadd\tstack-[5], r0, r5\n\tsub!\tr3, r5, r3\n\tjump.ge\t@.BB0_48\n\tshl.s\t3, r5, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[7], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_48:\n\tshl.s\t1, r5, r1\n\tor\t1, r1, r1\n\tadd\tstack-[4], r0, r5\n\tjump\t@.BB0_41\n.BB0_120:\n\tadd\t2, r0, r1\n\tsload\tr1, r3\n\tadd\tr3, r5, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tand!\t1, r3, r3\n\tjump.eq\t@.BB0_122\n\tadd\t@CPI0_49[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tjump\t@.BB0_5\n.BB0_133:\n\tld.1\t64, r2\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI0_0[0], r3, r3\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_191\n\tadd\tr0, r0, r6\n.BB0_135:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_135\n.BB0_191:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_137\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_137:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_122:\n\tadd\tr5, r0, stack-[7]\n\tsstore\tr1, r2\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_45[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[8]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[7], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_9[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_50[0], r0, r4\n\tadd\tr0, r0, r5\n.BB0_97:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r1\n\tadd\t1, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_49:\n\tsub!\tr7, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_51\n\tld.1\tr4, r1\n.BB0_51:\n\tshl.s\t3, r7, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r7, r2\n\tor\tr1, r2, r1\n.BB0_41:\n\tsstore\tr5, r1\n\tcontext.caller\tr6\n\tsub!\tr6, r0, r1\n\tjump.ne\t@.BB0_53\n\tld.1\t64, r1\n\tadd\t@CPI0_14[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_15[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_143:\n\tld\tr1, r1\n\tsload\tr1, r1\n\tsub!\tr1, r2, r1\n\tjump.ge\t@.BB0_145\n\tld.1\t64, r1\n\tadd\t@CPI0_46[0], r0, r2\n.BB0_142:\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_47[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_53:\n\tadd\t5, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_10[0], r2, r3\n\tor\tr3, r6, r3\n\tsstore\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\t@CPI0_11[0], r1, r1\n\tand\t@CPI0_4[0], r2, r5\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_12[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tadd\tstack-[8], r0, r1\n\tjump.eq\t@.BB0_2\n\tand\t@CPI0_4[0], r1, r1\n\tadd\t6, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_10[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_13[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_145:\n\tadd\tstack-[7], r0, r1\n\tjump\t@.BB0_146\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\t32, r4, r4\n\tadd\tr4, r2, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r3, r2\n\tst.1\tr2, r0\n\tadd\t31, r3, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nfinalize_allocation:\n.func_begin2:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI2_0[0], r1, r3\n\tjump.gt\t@.BB2_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB2_2\n\tst.1\t64, r1\n\tret\n.BB2_2:\n\tadd\t@CPI2_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\nabi_encode_address_uint256_uint256:\n.func_begin3:\n\tadd\t64, r1, r5\n\tst.1\tr5, r4\n\tadd\t32, r1, r4\n\tst.1\tr4, r3\n\tand\t@CPI3_0[0], r2, r2\n\tst.1\tr1, r2\n\tadd\t96, r1, r1\n\tret\n.func_end3:\n\nfun_spendAllowance:\n.func_begin4:\n\tnop\tstack+=[5]\n\tadd\tr3, r0, stack-[4]\n\tadd\tr2, r0, stack-[5]\n\tand\t@CPI4_0[0], r1, r1\n\tadd\tr1, r0, stack-[2]\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[1]\n\tst.1\t32, r1\n\tadd\t@CPI4_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tadd\tstack-[5], r0, r2\n\tand\t@CPI4_0[0], r2, r2\n\tadd\tr2, r0, stack-[3]\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tadd\tstack-[5], r0, r2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub.s\t1, r0, r1\n\tsub!\tr3, r1, r1\n\tjump.eq\t@.BB4_5\n\tsub.s!\tstack-[4], r3, r1\n\tjump.lt\t@.BB4_6\n\tadd\tstack-[2], r0, r2\n\tsub!\tr2, r0, r1\n\tjump.eq\t@.BB4_8\n\tadd\tr3, r0, stack-[5]\n\tsub!\tstack-[3], r0, r1\n\tjump.eq\t@.BB4_11\n\tst.1\t0, r2\n\tadd\tstack-[1], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI4_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tld\tr1, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tadd.ge\t@CPI4_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI4_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_1\n\tadd\tstack-[5], r0, r3\n\tsub.s\tstack-[4], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n.BB4_5:\n\tret\n.BB4_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_6:\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[3]\n\tadd\t@CPI4_6[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[4], r0, r4\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI4_1[0], r0, r2\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI4_1[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_8:\n\tld.1\t64, r1\n\tadd\t@CPI4_5[0], r0, r2\n\tjump\t@.BB4_9\n.BB4_11:\n\tld.1\t64, r1\n\tadd\t@CPI4_3[0], r0, r2\n.BB4_9:\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI4_1[0], r0, r2\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI4_4[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_transfer:\n.func_begin5:\n\tnop\tstack+=[5]\n\tadd\tr3, r0, stack-[5]\n\tand!\t@CPI5_0[0], r1, r3\n\tjump.eq\t@.BB5_1\n\tadd\tr1, r0, stack-[1]\n\tand!\t@CPI5_0[0], r2, stack-[3]\n\tjump.eq\t@.BB5_4\n\tadd\tr3, r0, stack-[4]\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI5_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI5_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[2]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB5_8\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI5_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_6\n\tadd\tstack-[2], r0, r3\n\tsub.s\tstack-[5], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI5_1[0], r1, r2\n\tadd.ge\t@CPI5_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI5_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB5_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[5], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI5_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI5_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI5_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI5_4[0], r0, r4\n\tadd\tstack-[4], r0, r5\n\tadd\tstack-[3], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB5_6\n\tret\n.BB5_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_1:\n\tld.1\t64, r1\n\tadd\t@CPI5_8[0], r0, r2\n\tjump\t@.BB5_2\n.BB5_4:\n\tld.1\t64, r1\n\tadd\t@CPI5_6[0], r0, r2\n.BB5_2:\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI5_7[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_8:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\t@CPI5_5[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tstack-[2], r0, r3\n\tadd\tstack-[5], r0, r4\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI5_1[0], r0, r2\n\tsub.s!\t@CPI5_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI5_1[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_burn:\n.func_begin6:\n\tnop\tstack+=[4]\n\tadd\tr2, r0, stack-[4]\n\tadd\tr1, r0, stack-[1]\n\tand!\t@CPI6_0[0], r1, r4\n\tjump.eq\t@.BB6_1\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_3\n\tadd\tstack-[3], r0, r2\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tr3, r0, stack-[2]\n\tsub.s!\tstack-[4], r3, r1\n\tjump.lt\t@.BB6_5\n\tst.1\t0, r2\n\tst.1\t32, r0\n\tadd\t@CPI6_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI6_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_3\n\tadd\tstack-[4], r0, r3\n\tsub\tstack-[2], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd\t@CPI6_1[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI6_1[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI6_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI6_4[0], r0, r4\n\tadd\tstack-[3], r0, r5\n\tadd\tr0, r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB6_3\n\tret\n.BB6_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_1:\n\tld.1\t64, r1\n\tadd\t@CPI6_6[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI6_1[0], r0, r2\n\tsub.s!\t@CPI6_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI6_7[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB6_5:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[3]\n\tadd\t@CPI6_5[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tstack-[2], r0, r3\n\tadd\tstack-[4], r0, r4\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI6_1[0], r0, r2\n\tsub.s!\t@CPI6_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI6_1[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end6:\n\n__cxa_throw:\n\trevert\n\n__sha3:\n.func_begin7:\n\tadd\t@CPI8_0[0], r0, r3\n\tsub.s!\t@CPI8_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI8_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI8_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI8_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_2\n\tld\tr1, r1\n\tret\n.BB8_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\n__farcall:\n.func_begin8:\n.tmp0:\n\tfar_call\tr1, r2, @.BB9_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB9_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end8:\n\n__staticcall:\n.func_begin9:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB10_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end9:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_1:\nCPI5_1:\nCPI6_1:\nCPI8_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -18446744073709551457\nCPI0_2:\n\t.cell -18446744073709551489\nCPI0_3:\n\t.cell 8589934560\nCPI0_4:\nCPI3_0:\nCPI4_0:\nCPI5_0:\nCPI6_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_5:\n\t.cell 18446744073709551551\nCPI0_6:\n\t.cell 30936411264679932392881305702506323544528501137454089766138590983690165157888\nCPI0_7:\n\t.cell 30904384427043955276515214714137160321043835064552586612404209955932207054848\nCPI0_8:\nCPI2_0:\n\t.cell 18446744073709551615\nCPI0_9:\nCPI5_3:\nCPI6_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_10:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_11:\nCPI8_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_12:\n\t.cell -52524777015005588113349992707137368332388074750292320778649315033004770043936\nCPI0_13:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_14:\n\t.cell 13710277464781854216000659759875001615964737203828340066645871065499466465280\nCPI0_15:\nCPI2_2:\nCPI4_4:\nCPI5_7:\nCPI6_7:\n\t.cell 2852213850513516153367582212096\nCPI0_16:\n\t.cell 1889567280\nCPI0_17:\n\t.cell 2514000704\nCPI0_18:\n\t.cell 3714247997\nCPI0_19:\n\t.cell 3714247998\nCPI0_20:\n\t.cell 4076725131\nCPI0_21:\n\t.cell 2514000705\nCPI0_22:\n\t.cell 2835717307\nCPI0_23:\n\t.cell 2043438991\nCPI0_24:\n\t.cell 2043438992\nCPI0_25:\n\t.cell 2376452955\nCPI0_26:\n\t.cell 1889567281\nCPI0_27:\n\t.cell 1901074598\nCPI0_28:\n\t.cell 599290588\nCPI0_29:\n\t.cell 1086394136\nCPI0_30:\n\t.cell 1086394137\nCPI0_31:\n\t.cell 1117154408\nCPI0_32:\n\t.cell 599290589\nCPI0_33:\n\t.cell 826074471\nCPI0_34:\n\t.cell 117300739\nCPI0_35:\n\t.cell 157198259\nCPI0_36:\n\t.cell 404098525\nCPI0_37:\n\t.cell 7938186097999196165550678859506685896924014503924332068426884830790147899392\nCPI0_38:\n\t.cell 2852213852874699394802404818944\nCPI0_39:\n\t.cell 2535301202817642044428229017600\nCPI0_40:\n\t.cell 2535301200456458802993406410752\nCPI0_41:\n\t.cell -53278079350709166316280423202849322519190186591071851114874353210178472783461\nCPI0_42:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_43:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_44:\n\t.cell -39587748923792368557570368188053131474772206988656257879945012238043565785088\nCPI0_45:\nCPI4_2:\nCPI5_2:\nCPI6_2:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_46:\n\t.cell -628260928438318264400544223411256354265688479590663273029390613717333311488\nCPI0_47:\n\t.cell 316912650057057350374175801344\nCPI0_48:\n\t.cell -36842949717063681793758332973952725163765603495702707912554436110528609779712\nCPI0_49:\nCPI2_1:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_50:\nCPI5_4:\nCPI6_4:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI0_51:\n\t.cell 316912652418240591808998408192\nCPI0_52:\n\t.cell -5538065414938723585959174902570366379880062099558422446093903940422947831808\nCPI0_53:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_54:\nCPI4_3:\n\t.cell -48779021399624352913043740871316806255710487544085296571819983744317932961792\nCPI0_55:\nCPI4_5:\n\t.cell -11755061144800301697569464646051016592542027884323852438436504014981133500416\nCPI0_56:\n\t.cell -27889059366240281169193357100633332908378892778709981755071813198463099602853\nCPI4_6:\n\t.cell -2008451700269974843276142548484964856347179961252680468036279050352537370624\nCPI5_5:\nCPI6_5:\n\t.cell -12521951952277481918037692698396753805066444367861040067922658107645432430592\nCPI5_6:\n\t.cell -8925786854382365140803610566892621886666030076708212855559399484773745295360\nCPI5_8:\nCPI6_6:\n\t.cell -47593579280375979043157453241769130281332370874351131709864197298683662827520\n",
          "bytecode": {
            "object": ""
          },
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "burn(uint256)": "42966c68",
            "burnFrom(address,uint256)": "79cc6790",
            "decimals()": "313ce567",
            "mint(address,uint256)": "40c10f19",
            "name()": "06fdde03",
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd",
            "transferOwnership(address)": "f2fde38b"
          }
        },
        "irOptimized": "/// @use-src 0:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 1:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 2:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 3:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 4:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\", 5:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 6:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 7:\"test/mocks/MockMoreDebtDSC.sol\"\nobject \"MockMoreDebtDSC_1102\" {\n    code {\n        {\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MockMoreDebtDSC_1102\")\n            let argSize := sub(codesize(), programSize)\n            let _2 := not(31)\n            let _3 := 31\n            let newFreePtr := add(_1, and(add(argSize, _3), _2))\n            let _4 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _4), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            let _5 := 32\n            if slt(sub(add(_1, argSize), _1), _5)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let value := mload(_1)\n            let _6 := sub(shl(160, 1), 1)\n            let _7 := and(value, _6)\n            if iszero(eq(value, _7))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let memPtr := allocate_memory()\n            mstore(memPtr, 23)\n            mstore(add(memPtr, _5), \"DecentralizedStableCoin\")\n            let memPtr_1 := allocate_memory()\n            let _8 := 3\n            mstore(memPtr_1, _8)\n            mstore(add(memPtr_1, _5), \"DSC\")\n            let newLen := mload(memPtr)\n            if gt(newLen, _4)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x24)\n            }\n            let _9 := sload(_8)\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let _10 := 1\n            length := shr(_10, _9)\n            let outOfPlaceEncoding := and(_9, _10)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _5))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x24)\n            }\n            if gt(length, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _8)\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                let deleteStart := add(data, shr(5, add(newLen, _3)))\n                if lt(newLen, _5) { deleteStart := data }\n                let _11 := add(data, shr(5, add(length, _3)))\n                let start := deleteStart\n                for { } lt(start, _11) { start := add(start, _10) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            srcOffset := _5\n            switch gt(newLen, _3)\n            case 1 {\n                let loopEnd := and(newLen, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _8)\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                for { } lt(i, loopEnd) { i := add(i, _5) }\n                {\n                    sstore(dstPtr, mload(add(memPtr, srcOffset)))\n                    dstPtr := add(dstPtr, _10)\n                    srcOffset := add(srcOffset, _5)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(memPtr, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(_8, newLen), 248), not(0)))))\n                }\n                sstore(_8, add(shl(_10, newLen), _10))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                if newLen\n                {\n                    value_1 := mload(add(memPtr, srcOffset))\n                }\n                sstore(_8, or(and(value_1, not(shr(shl(_8, newLen), not(0)))), shl(_10, newLen)))\n            }\n            let newLen_1 := mload(memPtr_1)\n            if gt(newLen_1, _4)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 2:1985:2002  \"_symbol = symbol_\" */ 0x04, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x24)\n            }\n            /// @src 2:1985:2002  \"_symbol = symbol_\"\n            let _12 := 0x04\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let _13 := sload(/** @src 2:1985:2002  \"_symbol = symbol_\" */ _12)\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            length_1 := shr(_10, _13)\n            let outOfPlaceEncoding_1 := and(_13, _10)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, _5))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(224, 0x4e487b71))\n                mstore(/** @src 2:1985:2002  \"_symbol = symbol_\" */ _12, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x24)\n            }\n            if gt(length_1, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:1985:2002  \"_symbol = symbol_\" */ _12)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _3)))\n                if lt(newLen_1, _5) { deleteStart_1 := data_1 }\n                let _14 := add(data_1, shr(5, add(length_1, _3)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _14) { start_1 := add(start_1, _10) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            srcOffset_1 := _5\n            switch gt(newLen_1, _3)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 2:1985:2002  \"_symbol = symbol_\" */ _12)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _5) }\n                {\n                    sstore(dstPtr_1, mload(add(memPtr_1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, _10)\n                    srcOffset_1 := add(srcOffset_1, _5)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(memPtr_1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(_8, newLen_1), 248), not(0)))))\n                }\n                sstore(/** @src 2:1985:2002  \"_symbol = symbol_\" */ _12, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ add(shl(_10, newLen_1), _10))\n            }\n            default {\n                let value_2 := /** @src -1:-1:-1 */ 0\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                if newLen_1\n                {\n                    value_2 := mload(add(memPtr_1, srcOffset_1))\n                }\n                sstore(/** @src 2:1985:2002  \"_symbol = symbol_\" */ _12, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ or(and(value_2, not(shr(shl(_8, newLen_1), not(0)))), shl(_10, newLen_1)))\n            }\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            if /** @src 0:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 7:1921:1931  \"msg.sender\" */ caller())\n            /// @src 0:1269:1364  \"if (initialOwner == address(0)) {...\"\n            {\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                let _15 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                mstore(_15, shl(224, 0x1e4fbdf7))\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                mstore(/** @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_15, /** @src 2:1985:2002  \"_symbol = symbol_\" */ _12), /** @src -1:-1:-1 */ 0)\n                /// @src 0:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                revert(_15, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n            }\n            let _16 := sload(/** @src 0:3004:3010  \"_owner\" */ 0x05)\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            let _17 := not(sub(shl(160, 1), 1))\n            sstore(/** @src 0:3004:3010  \"_owner\" */ 0x05, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ or(and(_16, _17), /** @src 7:1921:1931  \"msg.sender\" */ caller()))\n            /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            let _18 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n            /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ and(_16, _6), /** @src 7:1921:1931  \"msg.sender\" */ caller())\n            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n            sstore(/** @src 7:1943:1975  \"mockAggregator = _mockAggregator\" */ 0x06, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ or(and(sload(/** @src 7:1943:1975  \"mockAggregator = _mockAggregator\" */ 0x06), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _17), _7))\n            let _19 := datasize(\"MockMoreDebtDSC_1102_deployed\")\n            codecopy(_18, dataoffset(\"MockMoreDebtDSC_1102_deployed\"), _19)\n            return(_18, _19)\n        }\n        function allocate_memory() -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, 64)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n    }\n    /// @use-src 0:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 2:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 4:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol\", 6:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 7:\"test/mocks/MockMoreDebtDSC.sol\"\n    object \"MockMoreDebtDSC_1102_deployed\" {\n        code {\n            {\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret := 0\n                        let slotValue := sload(/** @src 2:2151:2156  \"_name\" */ 0x03)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let length := 0\n                        let _5 := 1\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _6 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _6))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _6), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 2:2151:2156  \"_name\" */ 0x03)\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(_1, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(_1, i), _6)\n                        }\n                        finalize_allocation(_1, sub(ret, _1))\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_string(memPos, _1), memPos))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0 := abi_decode_address_4900()\n                        let _7 := calldataload(36)\n                        /// @src 2:10057:10146  \"if (owner == address(0)) {...\"\n                        if /** @src 2:10061:10080  \"owner == address(0)\" */ iszero(/** @src 6:735:745  \"msg.sender\" */ caller())\n                        /// @src 2:10057:10146  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            let _8 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            mstore(_8, shl(224, 0xe602df05))\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            mstore(/** @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_8, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3), 0)\n                            /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            revert(_8, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                        }\n                        let _9 := and(/** @src 2:10159:10180  \"spender == address(0)\" */ value0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 2:10155:10245  \"if (spender == address(0)) {...\"\n                        if /** @src 2:10159:10180  \"spender == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _9)\n                        /// @src 2:10155:10245  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            let _10 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            mstore(_10, shl(225, 0x4a1406b1))\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            mstore(/** @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_10, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3), 0)\n                            /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            revert(_10, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                        }\n                        mstore(0, /** @src 6:735:745  \"msg.sender\" */ caller())\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        mstore(0x20, /** @src 2:9105:9109  \"true\" */ 0x01)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let _11 := keccak256(0, _2)\n                        mstore(0, _9)\n                        mstore(0x20, _11)\n                        sstore(keccak256(0, _2), _7)\n                        /// @src 2:10333:10364  \"Approval(owner, spender, value)\"\n                        let _12 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                        mstore(_12, _7)\n                        /// @src 2:10333:10364  \"Approval(owner, spender, value)\"\n                        log3(_12, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x20, /** @src 2:10333:10364  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 6:735:745  \"msg.sender\" */ caller(), /** @src 2:10333:10364  \"Approval(owner, spender, value)\" */ _9)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, /** @src 2:9105:9109  \"true\" */ 0x01)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        return(memPos_1, 0x20)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _13 := sload(/** @src 2:3222:3234  \"_totalSupply\" */ 0x02)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, _13)\n                        return(memPos_2, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address_4900()\n                        let value1 := abi_decode_address()\n                        let value := calldataload(68)\n                        /// @src 2:5213:5218  \"value\"\n                        fun_spendAllowance(value0_1, /** @src 6:735:745  \"msg.sender\" */ caller(), /** @src 2:5213:5218  \"value\" */ value)\n                        /// @src 2:5249:5254  \"value\"\n                        fun_transfer(value0_1, value1, value)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, 1)\n                        return(memPos_3, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, /** @src 2:3075:3077  \"18\" */ 0x12)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0x40c10f19 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(0, 0) }\n                        let value0_2 := abi_decode_address_4900()\n                        let value_1 := calldataload(36)\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let _14 := and(/** @src 7:2541:2558  \"_to == address(0)\" */ value0_2, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 7:2537:2633  \"if (_to == address(0)) {...\"\n                        if /** @src 7:2541:2558  \"_to == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _14)\n                        /// @src 7:2537:2633  \"if (_to == address(0)) {...\"\n                        {\n                            /// @src 7:2581:2622  \"DecentralizedStableCoin__NotZeroAddress()\"\n                            let _15 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 7:2581:2622  \"DecentralizedStableCoin__NotZeroAddress()\"\n                            mstore(_15, shl(224, 0xf3c190e9))\n                            revert(_15, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                        }\n                        /// @src 7:2642:2743  \"if (_amount <= 0) {...\"\n                        if /** @src 7:2646:2658  \"_amount <= 0\" */ iszero(value_1)\n                        /// @src 7:2642:2743  \"if (_amount <= 0) {...\"\n                        {\n                            /// @src 7:2681:2732  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\"\n                            let _16 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 7:2681:2732  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\"\n                            mstore(_16, shl(224, 0xae8ba123))\n                            revert(_16, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                        }\n                        let _17 := sload(/** @src 2:6496:6517  \"_totalSupply += value\" */ 0x02)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let sum := add(_17, value_1)\n                        if gt(_17, sum)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 36)\n                        }\n                        sstore(/** @src 2:6496:6517  \"_totalSupply += value\" */ 0x02, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sum)\n                        mstore(0, _14)\n                        mstore(0x20, 0)\n                        let dataSlot := keccak256(0, _2)\n                        sstore(dataSlot, add(sload(/** @src 2:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ value_1))\n                        /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                        let _18 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                        mstore(_18, value_1)\n                        /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                        log3(_18, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x20, /** @src 2:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0, /** @src 2:7346:7371  \"Transfer(from, to, value)\" */ _14)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, 1)\n                        return(memPos_5, 0x20)\n                    }\n                    case 0x42966c68 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := calldataload(_3)\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let value_3 := and(sload(/** @src 7:2102:2116  \"mockAggregator\" */ 0x06), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        if iszero(extcodesize(value_3))\n                        {\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        let _19 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        mstore(_19, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ shl(225, 0x543d1067))\n                        mstore(/** @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\" */ add(_19, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3), 0)\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        let _20 := call(gas(), value_3, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0, /** @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\" */ _19, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36, /** @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\" */ _19, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0)\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        if iszero(_20)\n                        {\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 7:2085:2133  \"MockV3Aggregator(mockAggregator).updateAnswer(0)\"\n                        if _20\n                        {\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            if gt(_19, 0xffffffffffffffff)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(0, 36)\n                            }\n                            mstore(_2, _19)\n                            _4 := 0\n                        }\n                        mstore(_4, /** @src 7:2171:2181  \"msg.sender\" */ caller())\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        mstore(32, _4)\n                        let _21 := sload(keccak256(_4, _2))\n                        /// @src 7:2192:2293  \"if (_amount <= 0) {...\"\n                        if /** @src 7:2196:2208  \"_amount <= 0\" */ iszero(value_2)\n                        /// @src 7:2192:2293  \"if (_amount <= 0) {...\"\n                        {\n                            /// @src 7:2231:2282  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\"\n                            let _22 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 7:2231:2282  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\"\n                            mstore(_22, /** @src 7:2681:2732  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\" */ shl(224, 0xae8ba123))\n                            /// @src 7:2231:2282  \"DecentralizedStableCoin__AmountMustBeMoreThanZero()\"\n                            revert(_22, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                        }\n                        /// @src 7:2302:2408  \"if (balance < _amount) {...\"\n                        if /** @src 7:2306:2323  \"balance < _amount\" */ lt(_21, value_2)\n                        /// @src 7:2302:2408  \"if (balance < _amount) {...\"\n                        {\n                            /// @src 7:2346:2397  \"DecentralizedStableCoin__BurnAmountExceedsBalance()\"\n                            let _23 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 7:2346:2397  \"DecentralizedStableCoin__BurnAmountExceedsBalance()\"\n                            mstore(_23, shl(224, 0xfe9c6abb))\n                            revert(_23, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                        }\n                        /// @src 4:692:697  \"value\"\n                        fun_burn(/** @src 7:2171:2181  \"msg.sender\" */ caller(), /** @src 4:692:697  \"value\" */ value_2)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        return(_4, _4)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, and(abi_decode_address_4900(), sub(shl(160, 1), 1)))\n                        mstore(32, _4)\n                        let _24 := sload(keccak256(_4, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _24)\n                        return(memPos_6, 32)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let _25 := sload(/** @src 0:3004:3010  \"_owner\" */ 0x05)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        sstore(/** @src 0:3004:3010  \"_owner\" */ 0x05, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ and(_25, shl(160, 0xffffffffffffffffffffffff)))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ and(_25, sub(shl(160, 1), 1)), 0)\n                        return(_4, _4)\n                    }\n                    case 0x79cc6790 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_3 := abi_decode_address_4900()\n                        let value_4 := calldataload(36)\n                        /// @src 4:1135:1140  \"value\"\n                        fun_spendAllowance(value0_3, /** @src 6:735:745  \"msg.sender\" */ caller(), /** @src 4:1135:1140  \"value\" */ value_4)\n                        /// @src 4:1166:1171  \"value\"\n                        fun_burn(value0_3, value_4)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        return(_4, _4)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_5 := and(sload(/** @src 0:1710:1716  \"_owner\" */ 0x05), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, value_5)\n                        return(memPos_7, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr := mload(_2)\n                        let ret_1 := _4\n                        let slotValue_1 := sload(_3)\n                        let length_1 := _4\n                        let _26 := 1\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        let _27 := 32\n                        if eq(outOfPlaceEncoding_1, lt(length_1, _27))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(memPtr, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr, _27), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr, shl(5, iszero(iszero(length_1)))), _27)\n                        }\n                        case 1 {\n                            mstore(_4, _3)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := _4\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, _27) }\n                            {\n                                mstore(add(add(memPtr, i_1), _27), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, _26)\n                            }\n                            ret_1 := add(add(memPtr, i_1), _27)\n                        }\n                        finalize_allocation(memPtr, sub(ret_1, memPtr))\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_string(memPos_8, memPtr), memPos_8))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_4 := abi_decode_address_4900()\n                        /// @src 2:3754:3759  \"value\"\n                        fun_transfer(/** @src 6:735:745  \"msg.sender\" */ caller(), /** @src 2:3754:3759  \"value\" */ value0_4, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ calldataload(36))\n                        let memPos_9 := mload(_2)\n                        mstore(memPos_9, 1)\n                        return(memPos_9, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_5 := abi_decode_address_4900()\n                        let value1_1 := abi_decode_address()\n                        let _28 := sub(shl(160, 1), 1)\n                        mstore(_4, and(value0_5, _28))\n                        mstore(32, /** @src 2:3952:3963  \"_allowances\" */ 0x01)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let _29 := keccak256(_4, _2)\n                        mstore(0, and(value1_1, _28))\n                        mstore(32, _29)\n                        let _30 := sload(keccak256(0, _2))\n                        let memPos_10 := mload(_2)\n                        mstore(memPos_10, _30)\n                        return(memPos_10, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value0_6 := abi_decode_address_4900()\n                        /// @src 0:1500:1562  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        let _31 := sub(shl(160, 1), 1)\n                        let _32 := and(/** @src 0:2627:2649  \"newOwner == address(0)\" */ value0_6, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _31)\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        if /** @src 0:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _32)\n                        /// @src 0:2623:2714  \"if (newOwner == address(0)) {...\"\n                        {\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            let _33 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_2)\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            mstore(_33, shl(224, 0x1e4fbdf7))\n                            /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                            mstore(/** @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_33, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3), _4)\n                            /// @src 0:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                            revert(_33, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                        }\n                        let _34 := sload(/** @src 0:3004:3010  \"_owner\" */ 0x05)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        sstore(/** @src 0:3004:3010  \"_owner\" */ 0x05, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ or(and(_34, shl(160, 0xffffffffffffffffffffffff)), _32))\n                        /// @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0, 0, /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ and(_34, _31), /** @src 0:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _32)\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        return(_4, _4)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address_4900() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_address_uint256_uint256(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), value2)\n            }\n            /// @ast-id 798 @src 2:10663:11140  \"function _spendAllowance(address owner, address spender, uint256 value) internal virtual {...\"\n            function fun_spendAllowance(var_owner, var_spender, var_value)\n            {\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(var_owner, _1)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                mstore(0x20, /** @src 2:3952:3963  \"_allowances\" */ 0x01)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _3 := 0x40\n                let _4 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                let _5 := and(var_spender, _1)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                mstore(0x20, _4)\n                let _6 := sload(keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3))\n                /// @src 2:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                if /** @src 2:10828:10865  \"currentAllowance != type(uint256).max\" */ iszero(eq(_6, /** @src 2:10848:10865  \"type(uint256).max\" */ not(0)))\n                /// @src 2:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                {\n                    /// @src 2:10881:11011  \"if (currentAllowance < value) {...\"\n                    if /** @src 2:10885:10909  \"currentAllowance < value\" */ lt(_6, var_value)\n                    /// @src 2:10881:11011  \"if (currentAllowance < value) {...\"\n                    {\n                        /// @src 2:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                        let _7 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_3)\n                        /// @src 2:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                        mstore(_7, shl(225, 0x7dc7a0d9))\n                        revert(_7, sub(abi_encode_address_uint256_uint256(add(_7, 4), var_spender, _6, var_value), _7))\n                    }\n                    /// @src 2:10057:10146  \"if (owner == address(0)) {...\"\n                    if /** @src 2:10061:10080  \"owner == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                    /// @src 2:10057:10146  \"if (owner == address(0)) {...\"\n                    {\n                        /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                        let _8 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_3)\n                        /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                        mstore(_8, shl(224, 0xe602df05))\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        mstore(/** @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_8, 4), /** @src -1:-1:-1 */ 0)\n                        /// @src 2:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                        revert(_8, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                    }\n                    /// @src 2:10155:10245  \"if (spender == address(0)) {...\"\n                    if /** @src 2:10159:10180  \"spender == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                    /// @src 2:10155:10245  \"if (spender == address(0)) {...\"\n                    {\n                        /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                        let _9 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(_3)\n                        /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                        mstore(_9, shl(225, 0x4a1406b1))\n                        /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                        mstore(/** @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_9, 4), /** @src -1:-1:-1 */ 0)\n                        /// @src 2:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                        revert(_9, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                    }\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                    mstore(0x20, /** @src 2:3952:3963  \"_allowances\" */ 0x01)\n                    /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                    let _10 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3)\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _5)\n                    mstore(0x20, _10)\n                    sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _3), sub(/** @src 2:11077:11101  \"currentAllowance - value\" */ _6, var_value))\n                }\n            }\n            /// @ast-id 529 @src 2:5656:5956  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 2:5739:5757  \"from == address(0)\" */ var_from, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _1)\n                /// @src 2:5735:5821  \"if (from == address(0)) {...\"\n                if /** @src 2:5739:5757  \"from == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                /// @src 2:5735:5821  \"if (from == address(0)) {...\"\n                {\n                    /// @src 2:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    let _3 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n                    /// @src 2:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    mstore(_3, shl(225, 0x4b637e8f))\n                    /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                    mstore(/** @src 2:5780:5810  \"ERC20InvalidSender(address(0))\" */ add(_3, 4), /** @src 2:5755:5756  \"0\" */ 0x00)\n                    /// @src 2:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    revert(_3, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                }\n                let _4 := and(/** @src 2:5834:5850  \"to == address(0)\" */ var_to, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _1)\n                /// @src 2:5830:5916  \"if (to == address(0)) {...\"\n                if /** @src 2:5834:5850  \"to == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _4)\n                /// @src 2:5830:5916  \"if (to == address(0)) {...\"\n                {\n                    /// @src 2:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    let _5 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n                    /// @src 2:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(_5, shl(224, 0xec442f05))\n                    /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                    mstore(/** @src 2:5873:5905  \"ERC20InvalidReceiver(address(0))\" */ add(_5, 4), /** @src 2:5755:5756  \"0\" */ 0x00)\n                    /// @src 2:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    revert(_5, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                }\n                mstore(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                mstore(0x20, /** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _6 := sload(keccak256(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x40))\n                /// @src 2:6599:6714  \"if (fromBalance < value) {...\"\n                if /** @src 2:6603:6622  \"fromBalance < value\" */ lt(_6, var_value)\n                /// @src 2:6599:6714  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 2:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    let _7 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(0x40)\n                    /// @src 2:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(_7, shl(226, 0x391434e3))\n                    revert(_7, sub(abi_encode_address_uint256_uint256(add(_7, 4), var_from, _6, var_value), _7))\n                }\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                mstore(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _2)\n                mstore(0x20, /** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                sstore(keccak256(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x40), sub(/** @src 2:6852:6871  \"fromBalance - value\" */ _6, var_value))\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                mstore(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _4)\n                let dataSlot := keccak256(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 2:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ var_value))\n                /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                let _8 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(0x40)\n                mstore(_8, var_value)\n                /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                log3(_8, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x20, /** @src 2:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _4)\n            }\n            /// @ast-id 84 @src 0:1796:1958  \"function _checkOwner() internal view virtual {...\"\n            function fun_checkOwner()\n            {\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let value := and(sload(/** @src 0:1710:1716  \"_owner\" */ 0x05), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                if /** @src 0:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ value, /** @src 6:735:745  \"msg.sender\" */ caller()))\n                /// @src 0:1851:1952  \"if (owner() != _msgSender()) {...\"\n                {\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    let _1 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    mstore(_1, shl(224, 0x118cdaa7))\n                    /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                    mstore(/** @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 6:735:745  \"msg.sender\" */ caller())\n                    /// @src 0:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    revert(_1, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                }\n            }\n            /// @ast-id 672 @src 2:8247:8453  \"function _burn(address account, uint256 value) internal {...\"\n            function fun_burn(var_account, var_value)\n            {\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _1 := and(/** @src 2:8317:8338  \"account == address(0)\" */ var_account, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(shl(160, 1), 1))\n                /// @src 2:8313:8402  \"if (account == address(0)) {...\"\n                if /** @src 2:8317:8338  \"account == address(0)\" */ iszero(/** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _1)\n                /// @src 2:8313:8402  \"if (account == address(0)) {...\"\n                {\n                    /// @src 2:8361:8391  \"ERC20InvalidSender(address(0))\"\n                    let _2 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(64)\n                    /// @src 2:8361:8391  \"ERC20InvalidSender(address(0))\"\n                    mstore(_2, /** @src 2:5780:5810  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                    mstore(/** @src 2:8361:8391  \"ERC20InvalidSender(address(0))\" */ add(_2, 4), /** @src 2:8336:8337  \"0\" */ 0x00)\n                    /// @src 2:8361:8391  \"ERC20InvalidSender(address(0))\"\n                    revert(_2, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 36)\n                }\n                mstore(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _1)\n                mstore(0x20, /** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                let _3 := sload(keccak256(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x40))\n                /// @src 2:6599:6714  \"if (fromBalance < value) {...\"\n                if /** @src 2:6603:6622  \"fromBalance < value\" */ lt(_3, var_value)\n                /// @src 2:6599:6714  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 2:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    let _4 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(0x40)\n                    /// @src 2:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(_4, shl(226, 0x391434e3))\n                    revert(_4, sub(abi_encode_address_uint256_uint256(add(_4, 4), var_account, _3, var_value), _4))\n                }\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                mstore(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ _1)\n                mstore(0x20, /** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0)\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                sstore(keccak256(/** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x40), sub(/** @src 2:6852:6871  \"fromBalance - value\" */ _3, var_value))\n                /// @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\"\n                sstore(/** @src 2:7073:7094  \"_totalSupply -= value\" */ 0x02, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ sub(sload(/** @src 2:7073:7094  \"_totalSupply -= value\" */ 0x02), /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ var_value))\n                /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                let _5 := /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ mload(0x40)\n                mstore(_5, var_value)\n                /// @src 2:7346:7371  \"Transfer(from, to, value)\"\n                log3(_5, /** @src 7:1123:2801  \"contract MockMoreDebtDSC is ERC20Burnable, Ownable {...\" */ 0x20, /** @src 2:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _1, /** @src 2:6356:6896  \"if (from == address(0)) {...\" */ 0)\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220fcf1ff9f71d493c7034a7a5512659f9fb3940623c1b15092d9e9e654bd3830da64736f6c63430008180033\"\n    }\n}\n",
        "hash": "010001a1d72001da262c7e1fa1a739459e339ab012f4e02b0dc77aeb587f4e28",
        "factoryDependencies": {}
      }
    },
    "test/mocks/MockV3Aggregator.sol": {
      "MockV3Aggregator": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "uint8",
                "name": "_decimals",
                "type": "uint8"
              },
              {
                "internalType": "int256",
                "name": "_initialAnswer",
                "type": "int256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "description",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "getAnswer",
            "outputs": [
              {
                "internalType": "int256",
                "name": "",
                "type": "int256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint80",
                "name": "_roundId",
                "type": "uint80"
              }
            ],
            "name": "getRoundData",
            "outputs": [
              {
                "internalType": "uint80",
                "name": "roundId",
                "type": "uint80"
              },
              {
                "internalType": "int256",
                "name": "answer",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "startedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "updatedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint80",
                "name": "answeredInRound",
                "type": "uint80"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "getTimestamp",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestAnswer",
            "outputs": [
              {
                "internalType": "int256",
                "name": "",
                "type": "int256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestRound",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestRoundData",
            "outputs": [
              {
                "internalType": "uint80",
                "name": "roundId",
                "type": "uint80"
              },
              {
                "internalType": "int256",
                "name": "answer",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "startedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "updatedAt",
                "type": "uint256"
              },
              {
                "internalType": "uint80",
                "name": "answeredInRound",
                "type": "uint80"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "latestTimestamp",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "int256",
                "name": "_answer",
                "type": "int256"
              }
            ],
            "name": "updateAnswer",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint80",
                "name": "_roundId",
                "type": "uint80"
              },
              {
                "internalType": "int256",
                "name": "_answer",
                "type": "int256"
              },
              {
                "internalType": "uint256",
                "name": "_timestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "_startedAt",
                "type": "uint256"
              }
            ],
            "name": "updateRoundData",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "version",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "metadata": {
          "optimizer_settings": {
            "is_debug_logging_enabled": false,
            "is_fallback_to_size_enabled": false,
            "is_system_request_memoization_disabled": true,
            "is_verify_each_enabled": false,
            "level_back_end": "Aggressive",
            "level_middle_end": "Aggressive",
            "level_middle_end_size": "Zero"
          },
          "solc_metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"test/mocks/MockV3Aggregator.sol\":{\"keccak256\":\"0xf5aeb38ff6e828fdf348fc48e1c224d4d40456a027ea8a8c73b387fd1c6fece8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c521efdee62df25368b477537d7b7481402a5b651fa37baaf4dcce7f0dca2d6a\",\"dweb:/ipfs/QmcPqKS4amddY7fjh3Wtw5zrNWUqEH7yS6MkdT9azcxss8\"]}},\"version\":1}",
          "solc_version": "0.8.24",
          "solc_zkvm_edition": null,
          "zk_version": "1.4.0"
        },
        "evm": {
          "legacyAssembly": null,
          "assembly": "\t.text\n\t.file\t\"MockV3Aggregator.sol:MockV3Aggregator\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[5]\n\tptr.add\tr1, r0, r7\n\tadd\tr7, r0, r1\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, r1\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r1, r2\n\tjump.lt\t@.BB0_2\n\tld\tr7, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_5[0], r2, r3\n\tjump.gt\t@.BB0_23\n\tsub.s!\t@CPI0_13[0], r2, r3\n\tjump.gt\t@.BB0_20\n\tsub.s!\t@CPI0_17[0], r2, r3\n\tjump.eq\t@.BB0_30\n\tsub.s!\t@CPI0_18[0], r2, r3\n\tjump.eq\t@.BB0_32\n\tsub.s!\t@CPI0_19[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t1, r0, r1\n\tjump\t@.BB0_38\n.BB0_1:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tadd\t159, r1, r2\n\tand\t@CPI0_1[0], r2, r2\n\tst.1\t64, r2\n\tand\t31, r1, r2\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_68\n\tadd\tr0, r0, r4\n.BB0_5:\n\tshl.s\t5, r4, r5\n\tptr.add\tr7, r5, r6\n\tld\tr6, r6\n\tadd\t128, r5, r5\n\tst.1\tr5, r6\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_5\n.BB0_68:\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_7\n\tshl.s\t5, r3, r3\n\tptr.add\tr7, r3, r4\n\tshl.s\t3, r2, r2\n\tadd\t128, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr4, r4\n\tsub\t256, r2, r2\n\tshr\tr4, r2, r4\n\tshl\tr4, r2, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_7:\n\tsub.s!\t64, r1, r1\n\tjump.lt\t@.BB0_2\n\tld.1\t128, r1\n\tsub.s!\t255, r1, r2\n\tjump.le\t@.BB0_9\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_23:\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_27\n\tsub.s!\t@CPI0_10[0], r2, r3\n\tjump.eq\t@.BB0_46\n\tsub.s!\t@CPI0_11[0], r2, r3\n\tjump.eq\t@.BB0_48\n\tsub.s!\t@CPI0_12[0], r2, r2\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r1, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r2\n\tadd\t1, r0, r1\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr1, r2\n\tadd\t@CPI0_2[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_10\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsstore\tr2, r1\n\tadd\t3, r0, r3\n\tsload\tr3, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB0_12\n\tadd\t1, r1, r1\n\tsstore\tr3, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\tr3, r0, stack-[3]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[5]\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tjump\t@.BB0_58\n.BB0_20:\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.eq\t@.BB0_40\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_42\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t192, r0, r1\n\tst.1\t64, r1\n\tadd\t31, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_25[0], r0, r2\n\tst.1\t160, r2\n\tadd\t32, r0, r3\n\tst.1\t192, r3\n\tst.1\t224, r1\n\tst.1\t256, r2\n\tst.1\t287, r0\n\tadd\t@CPI0_26[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tsub.s\t256, r0, r2\n\tsload\tr0, r3\n\tand\tr3, r2, r2\n\tor\tr2, r1, r1\n\tld.1\t160, r2\n\tsstore\tr0, r1\n\tadd\t1, r0, r1\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr1, r2\n\tadd\t@CPI0_2[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_10\n\tld\tr1, r1\n\tadd\t2, r0, r2\n\tsstore\tr2, r1\n\tadd\t3, r0, r3\n\tsload\tr3, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB0_13\n.BB0_12:\n\tadd\t@CPI0_23[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_27:\n\tsub.s!\t@CPI0_7[0], r2, r3\n\tjump.eq\t@.BB0_59\n\tsub.s!\t@CPI0_8[0], r2, r3\n\tjump.eq\t@.BB0_63\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[5], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[5], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tand\t@CPI0_20[0], r2, r2\n\tsload\tr1, r1\n\tjump\t@.BB0_52\n.BB0_10:\n\trevert\n.BB0_30:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tand\t255, r1, r1\n\tjump\t@.BB0_39\n.BB0_32:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r1, r1\n\tsub.s!\t128, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_20[0], r1, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t68, r7, r2\n\tld\tr2, r3\n\tadd\tr3, r0, stack-[3]\n\tptr.add.s\t36, r7, r2\n\tld\tr2, r4\n\tadd\tr4, r0, stack-[1]\n\tadd\t3, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr2, r1\n\tadd\t1, r0, r2\n\tsstore\tr2, r4\n\tadd\t2, r0, r2\n\tsstore\tr2, r3\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tptr.add\tr7, r0, stack-[2]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tptr.add\tstack-[2], r0, r1\n\tptr.add.s\t100, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[5]\n.BB0_58:\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_46:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t2, r0, r1\n\tjump\t@.BB0_38\n.BB0_48:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r1, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r2\n\tsub.s!\t@CPI0_20[0], r2, r1\n\tjump.gt\t@.BB0_2\n\tst.1\t0, r2\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[5]\n\tadd\tr2, r0, stack-[4]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[5], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[5], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tstack-[4], r0, r2\n.BB0_52:\n\tst.1\t128, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\t160, r3\n\tadd\tstack-[2], r0, r3\n\tst.1\t192, r3\n\tst.1\t224, r1\n\tst.1\t256, r2\n\tadd\t@CPI0_21[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_40:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tst.1\t128, r0\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_42:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t3, r0, r1\n\tjump\t@.BB0_38\n.BB0_59:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r1, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tjump\t@.BB0_62\n.BB0_63:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tsub.s\t4, r1, r1\n\tsub.s!\t32, r1, r1\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n.BB0_62:\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n.BB0_38:\n\tsload\tr1, r1\n.BB0_39:\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_13:\n\tadd\t1, r1, r1\n\tsstore\tr3, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\tr3, r0, stack-[3]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tnear_call\tr0, @__system_request, @DEFAULT_UNWIND\n\tadd\tr1, r0, stack-[5]\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__cxa_throw:\n\trevert\n\n__sha3:\n.func_begin1:\n\tadd\t@CPI2_0[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI2_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI2_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_2\n\tld\tr1, r1\n\tret\n.BB2_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__system_request:\n.func_begin2:\n\tadd\t@CPI3_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI3_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_2\n\tld\tr1, r1\n\tret\n.BB3_2:\n\trevert\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\nCPI3_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\nCPI3_0:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI0_3:\nCPI3_2:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 2181414761\nCPI0_6:\n\t.cell 3047905499\nCPI0_7:\n\t.cell 3047905500\nCPI0_8:\n\t.cell 3056820748\nCPI0_9:\n\t.cell 4272920204\nCPI0_10:\n\t.cell 2181414762\nCPI0_11:\n\t.cell 2591017205\nCPI0_12:\n\t.cell 2826576078\nCPI0_13:\n\t.cell 1425886543\nCPI0_14:\n\t.cell 1425886544\nCPI0_15:\n\t.cell 1720323842\nCPI0_16:\n\t.cell 1921311766\nCPI0_17:\n\t.cell 826074471\nCPI0_18:\n\t.cell 1252131103\nCPI0_19:\n\t.cell 1355963341\nCPI0_20:\n\t.cell 1208925819614629174706175\nCPI0_21:\n\t.cell 12676506004643477256401854660608\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_24:\n\t.cell 2852213850513516153367582212096\nCPI0_25:\n\t.cell 53458043733101429033990036804283285880690093948085482646013069910136186694656\nCPI0_26:\n\t.cell 7605903604911151271132453142528\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n",
          "bytecode": {
            "object": "0005000000000002000000000701034f00000000010700190000006001100270000000710110019700000001022001900000001c0000c13d0000008002000039000000400020043f000000040210008c000000420000413d000000000207043b000000e002200270000000760320009c000000440000213d0000007e0320009c000000870000213d000000820320009c000000e30000613d000000830320009c000000e90000613d000000840120009c000000420000c13d0000000001000416000000000101004b000000420000c13d0000000101000039000001710000013d0000000002000416000000000202004b000000420000c13d0000009f021000390000007202200197000000400020043f0000001f0210018f00000005031002720000002e0000613d00000000040000190000000505400210000000000657034f000000000606043b000000800550003900000000006504350000000104400039000000000534004b000000260000413d000000000402004b0000003d0000613d0000000503300210000000000437034f00000003022002100000008003300039000000000503043300000000052501cf000000000525022f000000000404043b0000010002200089000000000424022f00000000022401cf000000000252019f0000000000230435000000400110008c000000420000413d000000800100043d000000ff0210008c0000009d0000a13d0000000001000019000001c200010430000000770320009c000000c00000213d0000007b0320009c000001210000613d0000007c0320009c000001260000613d0000007d0220009c000000420000c13d0000000002000416000000000202004b000000420000c13d000000040110008a000000200110008c000000420000413d0000000401700370000000000201043b0000000101000039000500000002001d000000000021041b0000007301000041000000000010043900000071010000410000000002000414000000710320009c0000000002018019000000c00120021000000074011001c70000800b0200003901c001bb0000040f0000000102200190000000e20000613d000000000101043b0000000202000039000000000012041b0000000303000039000000000103041a000000010200008a000000000221004b000000ba0000613d0000000101100039000000000013041b00000000001004350000000401000039000000200010043f0000004001000039000400000001001d000300000003001d01c0019a0000040f0000000502000029000000000021041b0000000301000029000000000101041a00000000001004350000000501000039000000200010043f01c001ac0000040f000500000001001d000000040100002901c0019a0000040f0000000502000029000000000021041b0000000301000029000000000101041a00000000001004350000000601000039000000200010043f0000011b0000013d0000007f0120009c0000014e0000613d000000800120009c000001540000613d000000810120009c000000420000c13d0000000001000416000000000101004b000000420000c13d000000c001000039000000400010043f0000001f01000039000000800010043f0000008a02000041000000a00020043f0000002003000039000000c00030043f000000e00010043f000001000020043f0000011f0000043f0000008b01000041000001c10001042e000001000200008a000000000300041a000000000223016f000000000112019f000000a00200043d000000000010041b0000000101000039000500000002001d000000000021041b0000007301000041000000000010043900000071010000410000000002000414000000710320009c0000000002018019000000c00120021000000074011001c70000800b0200003901c001bb0000040f0000000102200190000000e20000613d000000000101043b0000000202000039000000000012041b0000000303000039000000000103041a000000010200008a000000000221004b000001750000c13d000000880100004100000000001004350000001101000039000000040010043f0000008901000041000001c200010430000000780320009c000001590000613d000000790320009c000001640000613d0000007a0120009c000000420000c13d0000000001000416000000000101004b000000420000c13d0000000301000039000000000101041a000400000001001d00000000001004350000000401000039000000200010043f0000004001000039000500000001001d01c0019a0000040f000000000101041a000300000001001d0000000601000039000000200010043f000000050100002901c0019a0000040f000000000101041a000200000001001d0000000501000039000000200010043f000000050100002901c0019a0000040f00000004020000290000008502200197000000000101041a000001450000013d000000000001042f0000000001000416000000000101004b000000420000c13d000000000100041a000000ff0110018f000001720000013d0000000002000416000000000202004b000000420000c13d000000040110008a000000800110008c000000420000413d0000000401700370000000000101043b000000850210009c000000420000213d0000004402700370000000000302043b000300000003001d0000002402700370000000000402043b000100000004001d0000000302000039000500000002001d000000000012041b0000000102000039000000000042041b0000000202000039000000000032041b00000000001004350000000401000039000000200010043f0000004001000039000400000001001d000200000007035301c0019a0000040f0000000102000029000000000021041b0000000501000029000000000101041a00000000001004350000000501000039000000200010043f000000040100002901c0019a0000040f0000000302000029000000000021041b0000000501000029000000000101041a00000000001004350000000601000039000000200010043f000000020100035f0000006401100370000000000101043b000500000001001d000000040100002901c0019a0000040f0000000502000029000000000021041b0000000001000019000001c10001042e0000000001000416000000000101004b000000420000c13d0000000201000039000001710000013d0000000002000416000000000202004b000000420000c13d000000040110008a000000200110008c000000420000413d0000000401700370000000000201043b000000850120009c000000420000213d00000000002004350000000401000039000000200010043f0000004001000039000500000001001d000400000002001d01c0019a0000040f000000000101041a000300000001001d0000000601000039000000200010043f000000050100002901c0019a0000040f000000000101041a000200000001001d0000000501000039000000200010043f000000050100002901c0019a0000040f000000000101041a0000000402000029000000800020043f0000000303000029000000a00030043f0000000203000029000000c00030043f000000e00010043f000001000020043f0000008601000041000001c10001042e0000000001000416000000000101004b000000420000c13d000000800000043f0000008701000041000001c10001042e0000000001000416000000000101004b000000420000c13d0000000301000039000001710000013d0000000002000416000000000202004b000000420000c13d000000040110008a000000200110008c000000420000413d0000000401700370000000000101043b000000000010043500000004010000390000016e0000013d0000000002000416000000000202004b000000420000c13d000000040110008a000000200110008c000000420000413d0000000401700370000000000101043b00000000001004350000000501000039000000200010043f000000400100003901c0019a0000040f000000000101041a000000800010043f0000008701000041000001c10001042e0000000101100039000000000013041b00000000001004350000000401000039000000200010043f0000004001000039000400000001001d000300000003001d01c0019a0000040f0000000502000029000000000021041b0000000301000029000000000101041a00000000001004350000000501000039000000200010043f01c001ac0000040f000500000001001d000000040100002901c0019a0000040f0000000502000029000000000021041b0000000301000029000000000101041a00000000001004350000000601000039000000200010043f000000040100002901c0019a0000040f0000000502000029000000000021041b0000002001000039000001000010044300000120000004430000007501000041000001c10001042e000000000001042f00000071020000410000000003000414000000710430009c0000000003028019000000710410009c00000000010280190000006001100210000000c002300210000000000112019f0000008c011001c7000080100200003901c001bb0000040f0000000102200190000001aa0000613d000000000101043b000000000001042d0000000001000019000001c2000104300000007301000041000000000010043900000071010000410000000002000414000000710320009c0000000002018019000000c00120021000000074011001c70000800b0200003901c001bb0000040f0000000102200190000001ba0000613d000000000101043b000000000001042d000000000001042f000001be002104230000000102000039000000000001042d0000000002000019000000000001042d000001c000000432000001c10001042e000001c200010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe0796b89b91644bc98cd93958e4c9038275d622183e25ac5af08cc6b5d9553913202000002000000000000000000000000000000040000000000000000000000000000000200000000000000000000000000000040000001000000000000000000000000000000000000000000000000000000000000000000000000008205bf6900000000000000000000000000000000000000000000000000000000b5ab58db00000000000000000000000000000000000000000000000000000000b5ab58dc00000000000000000000000000000000000000000000000000000000b633620c00000000000000000000000000000000000000000000000000000000feaf968c000000000000000000000000000000000000000000000000000000008205bf6a000000000000000000000000000000000000000000000000000000009a6fc8f500000000000000000000000000000000000000000000000000000000a87a20ce0000000000000000000000000000000000000000000000000000000054fd4d4f0000000000000000000000000000000000000000000000000000000054fd4d5000000000000000000000000000000000000000000000000000000000668a0f02000000000000000000000000000000000000000000000000000000007284e41600000000000000000000000000000000000000000000000000000000313ce567000000000000000000000000000000000000000000000000000000004aa2011f0000000000000000000000000000000000000000000000000000000050d25bcd00000000000000000000000000000000000000000000ffffffffffffffffffff00000000000000000000000000000000000000a000000080000000000000000000000000000000000000000000000000000000200000008000000000000000004e487b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000076302e362f74657374732f4d6f636b563341676772656761746f722e736f6c000000000000000000000000000000000000000060000000c0000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8d34baeb181a5197f91419f7eea68276b53ccc14a6bca488bed53123cd9172e"
          },
          "methodIdentifiers": {
            "decimals()": "313ce567",
            "description()": "7284e416",
            "getAnswer(uint256)": "b5ab58dc",
            "getRoundData(uint80)": "9a6fc8f5",
            "getTimestamp(uint256)": "b633620c",
            "latestAnswer()": "50d25bcd",
            "latestRound()": "668a0f02",
            "latestRoundData()": "feaf968c",
            "latestTimestamp()": "8205bf6a",
            "updateAnswer(int256)": "a87a20ce",
            "updateRoundData(uint80,int256,uint256,uint256)": "4aa2011f",
            "version()": "54fd4d50"
          }
        },
        "irOptimized": "/// @use-src 8:\"test/mocks/MockV3Aggregator.sol\"\nobject \"MockV3Aggregator_1295\" {\n    code {\n        {\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MockV3Aggregator_1295\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ 0x24)\n            }\n            let _2 := 64\n            mstore(_2, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            let value := mload(_1)\n            let _3 := and(value, 0xff)\n            if iszero(eq(value, _3))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            let value_1 := mload(add(_1, 32))\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ not(255)), _3))\n            sstore(1, value_1)\n            sstore(/** @src 8:899:932  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            let _4 := sload(/** @src 8:942:955  \"latestRound++\" */ 0x03)\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            if eq(_4, not(0))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ 0x24)\n            }\n            let ret := add(_4, 1)\n            sstore(/** @src 8:942:955  \"latestRound++\" */ 0x03, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ ret)\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ ret)\n            mstore(32, /** @src 8:965:974  \"getAnswer\" */ 0x04)\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ _2), value_1)\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ sload(/** @src 8:942:955  \"latestRound++\" */ 0x03))\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            mstore(32, /** @src 8:1007:1019  \"getTimestamp\" */ 0x05)\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ _2), /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ sload(/** @src 8:942:955  \"latestRound++\" */ 0x03))\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            mstore(32, /** @src 8:1060:1072  \"getStartedAt\" */ 0x06)\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ _2), /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n            /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n            let _5 := mload(_2)\n            let _6 := datasize(\"MockV3Aggregator_1295_deployed\")\n            codecopy(_5, dataoffset(\"MockV3Aggregator_1295_deployed\"), _6)\n            return(_5, _6)\n        }\n    }\n    /// @use-src 8:\"test/mocks/MockV3Aggregator.sol\"\n    object \"MockV3Aggregator_1295_deployed\" {\n        code {\n            {\n                /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, and(sload(0), 0xff))\n                        return(_1, 32)\n                    }\n                    case 0x4aa2011f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 128) { revert(0, 0) }\n                        let value0 := abi_decode_uint80()\n                        let value := calldataload(36)\n                        let value_1 := calldataload(68)\n                        let _4 := and(/** @src 8:1231:1253  \"latestRound = _roundId\" */ value0, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ 0xffffffffffffffffffff)\n                        sstore(/** @src 8:1231:1253  \"latestRound = _roundId\" */ 0x03, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ _4)\n                        sstore(1, value)\n                        sstore(/** @src 8:1295:1323  \"latestTimestamp = _timestamp\" */ 0x02, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ value_1)\n                        mstore(0, _4)\n                        mstore(32, _3)\n                        sstore(keccak256(0, _2), value)\n                        mstore(0, sload(/** @src 8:1231:1253  \"latestRound = _roundId\" */ 0x03))\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        mstore(32, /** @src 8:1375:1387  \"getTimestamp\" */ 0x05)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        sstore(keccak256(0, _2), value_1)\n                        mstore(0, sload(/** @src 8:1231:1253  \"latestRound = _roundId\" */ 0x03))\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        mstore(32, /** @src 8:1423:1435  \"getStartedAt\" */ 0x06)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        sstore(keccak256(0, _2), calldataload(100))\n                        return(0, 0)\n                    }\n                    case 0x50d25bcd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _5 := sload(/** @src 8:421:447  \"int256 public latestAnswer\" */ 1)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, _5)\n                        return(memPos, 32)\n                    }\n                    case 0x54fd4d50 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, 0)\n                        return(memPos_1, 32)\n                    }\n                    case 0x668a0f02 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _6 := sload(/** @src 8:489:515  \"uint256 public latestRound\" */ 3)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, _6)\n                        return(memPos_2, 32)\n                    }\n                    case 0x7284e416 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPtr := mload(_2)\n                        let newFreePtr := add(memPtr, _2)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr, 31)\n                        let _7 := 0x20\n                        mstore(add(memPtr, 0x20), \"v0.6/tests/MockV3Aggregator.sol\")\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, 0x20)\n                        let length := mload(memPtr)\n                        mstore(add(memPos_3, 0x20), length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, _7) }\n                        {\n                            mstore(add(add(memPos_3, i), _2), mload(add(add(memPtr, i), _7)))\n                        }\n                        mstore(add(add(memPos_3, length), _2), 0)\n                        return(memPos_3, add(sub(add(memPos_3, and(add(length, 31), not(31))), memPos_3), _2))\n                    }\n                    case 0x8205bf6a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _8 := sload(/** @src 8:453:483  \"uint256 public latestTimestamp\" */ 2)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, _8)\n                        return(memPos_4, 32)\n                    }\n                    case 0x9a6fc8f5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_1 := abi_decode_uint80()\n                        mstore(0, and(value0_1, 0xffffffffffffffffffff))\n                        mstore(32, _3)\n                        let _9 := sload(keccak256(0, _2))\n                        mstore(32, /** @src 8:1706:1718  \"getStartedAt\" */ 0x06)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _10 := sload(keccak256(0, _2))\n                        mstore(32, /** @src 8:1730:1742  \"getTimestamp\" */ 0x05)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _11 := sload(keccak256(0, _2))\n                        let memPos_5 := mload(_2)\n                        return(memPos_5, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_5, value0_1, _9, _10, _11, value0_1), memPos_5))\n                    }\n                    case 0xa87a20ce {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_2 := calldataload(_3)\n                        sstore(1, value_2)\n                        sstore(/** @src 8:899:932  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _12 := sload(/** @src 8:942:955  \"latestRound++\" */ 0x03)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        if eq(_12, not(0))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(0, 0x24)\n                        }\n                        let ret := add(_12, 1)\n                        sstore(/** @src 8:942:955  \"latestRound++\" */ 0x03, /** @src 8:320:2287  \"contract MockV3Aggregator {...\" */ ret)\n                        mstore(0, ret)\n                        mstore(32, _3)\n                        sstore(keccak256(0, _2), value_2)\n                        mstore(0, sload(/** @src 8:942:955  \"latestRound++\" */ 0x03))\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        mstore(32, /** @src 8:1007:1019  \"getTimestamp\" */ 0x05)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        sstore(keccak256(0, _2), /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        mstore(0, sload(/** @src 8:942:955  \"latestRound++\" */ 0x03))\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        mstore(32, /** @src 8:1060:1072  \"getStartedAt\" */ 0x06)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        sstore(keccak256(0, _2), /** @src 8:917:932  \"block.timestamp\" */ timestamp())\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        return(0, 0)\n                    }\n                    case 0xb5ab58dc {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(_3))\n                        mstore(32, _3)\n                        let _13 := sload(keccak256(0, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _13)\n                        return(memPos_6, 32)\n                    }\n                    case 0xb633620c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, calldataload(_3))\n                        mstore(32, /** @src 8:571:618  \"mapping(uint256 => uint256) public getTimestamp\" */ 5)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _14 := sload(keccak256(0, _2))\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, _14)\n                        return(memPos_7, 32)\n                    }\n                    case 0xfeaf968c {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _15 := sload(/** @src 8:1985:1996  \"latestRound\" */ 0x03)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let converted := and(_15, 0xffffffffffffffffffff)\n                        mstore(0, _15)\n                        mstore(0x20, _3)\n                        let _16 := sload(keccak256(0, _2))\n                        mstore(0x20, /** @src 8:2047:2059  \"getStartedAt\" */ 0x06)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _17 := sload(keccak256(0, _2))\n                        mstore(0x20, /** @src 8:2086:2098  \"getTimestamp\" */ 0x05)\n                        /// @src 8:320:2287  \"contract MockV3Aggregator {...\"\n                        let _18 := sload(keccak256(0, _2))\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_8, converted, _16, _17, _18, converted), memPos_8))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_uint80() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_encode_uint80_int256_uint256_uint256_uint80(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                let _1 := 0xffffffffffffffffffff\n                mstore(headStart, and(value0, _1))\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), value2)\n                mstore(add(headStart, 96), value3)\n                mstore(add(headStart, 128), and(value4, _1))\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220a225b55dc3dd85784a0653e53000a99df75412717abe8d3962032b663904087e64736f6c63430008180033\"\n    }\n}\n",
        "hash": "0100008f7cb86b8e60baad4a288384f0079740322b3e6ce12b0e84ac6b2e0251",
        "factoryDependencies": {}
      }
    }
  },
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "id": 0,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "exportedSymbols": {
          "Context": [
            979
          ],
          "Ownable": [
            147
          ]
        },
        "id": 148,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "102:24:0"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../utils/Context.sol",
            "id": 3,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 148,
            "sourceUnit": 980,
            "src": "128:45:0",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 2,
                  "name": "Context",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 979,
                  "src": "136:7:0",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": true,
            "baseContracts": [
              {
                "baseName": {
                  "id": 5,
                  "name": "Context",
                  "nameLocations": [
                    "692:7:0"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 979,
                  "src": "692:7:0"
                },
                "id": 6,
                "nodeType": "InheritanceSpecifier",
                "src": "692:7:0"
              }
            ],
            "canonicalName": "Ownable",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 4,
              "nodeType": "StructuredDocumentation",
              "src": "175:487:0",
              "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
            },
            "fullyImplemented": true,
            "id": 147,
            "linearizedBaseContracts": [
              147,
              979
            ],
            "name": "Ownable",
            "nameLocation": "681:7:0",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 8,
                "mutability": "mutable",
                "name": "_owner",
                "nameLocation": "722:6:0",
                "nodeType": "VariableDeclaration",
                "scope": 147,
                "src": "706:22:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 7,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "706:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "private"
              },
              {
                "documentation": {
                  "id": 9,
                  "nodeType": "StructuredDocumentation",
                  "src": "735:85:0",
                  "text": " @dev The caller account is not authorized to perform an operation."
                },
                "errorSelector": "118cdaa7",
                "id": 13,
                "name": "OwnableUnauthorizedAccount",
                "nameLocation": "831:26:0",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 11,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "866:7:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 13,
                      "src": "858:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 10,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "858:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "857:17:0"
                },
                "src": "825:50:0"
              },
              {
                "documentation": {
                  "id": 14,
                  "nodeType": "StructuredDocumentation",
                  "src": "881:82:0",
                  "text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
                },
                "errorSelector": "1e4fbdf7",
                "id": 18,
                "name": "OwnableInvalidOwner",
                "nameLocation": "974:19:0",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 17,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 16,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1002:5:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 18,
                      "src": "994:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 15,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "994:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "993:15:0"
                },
                "src": "968:41:0"
              },
              {
                "anonymous": false,
                "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                "id": 24,
                "name": "OwnershipTransferred",
                "nameLocation": "1021:20:0",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 23,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 20,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "previousOwner",
                      "nameLocation": "1058:13:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 24,
                      "src": "1042:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 19,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1042:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 22,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "1089:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 24,
                      "src": "1073:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 21,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1073:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1041:57:0"
                },
                "src": "1015:84:0"
              },
              {
                "body": {
                  "id": 49,
                  "nodeType": "Block",
                  "src": "1259:153:0",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 30,
                          "name": "initialOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27,
                          "src": "1273:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 33,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1297:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 32,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1289:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 31,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1289:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 34,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1289:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1273:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 44,
                      "nodeType": "IfStatement",
                      "src": "1269:95:0",
                      "trueBody": {
                        "id": 43,
                        "nodeType": "Block",
                        "src": "1301:63:0",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 39,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1350:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 38,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1342:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 37,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "1342:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 40,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1342:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 36,
                                "name": "OwnableInvalidOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 18,
                                "src": "1322:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 41,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1322:31:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 42,
                            "nodeType": "RevertStatement",
                            "src": "1315:38:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 46,
                            "name": "initialOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 27,
                            "src": "1392:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 45,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 146,
                          "src": "1373:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 47,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1373:32:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 48,
                      "nodeType": "ExpressionStatement",
                      "src": "1373:32:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 25,
                  "nodeType": "StructuredDocumentation",
                  "src": "1105:115:0",
                  "text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
                },
                "id": 50,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 28,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 27,
                      "mutability": "mutable",
                      "name": "initialOwner",
                      "nameLocation": "1245:12:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 50,
                      "src": "1237:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 26,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1237:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1236:22:0"
                },
                "returnParameters": {
                  "id": 29,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1259:0:0"
                },
                "scope": 147,
                "src": "1225:187:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 57,
                  "nodeType": "Block",
                  "src": "1521:41:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 53,
                          "name": "_checkOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 84,
                          "src": "1531:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$__$",
                            "typeString": "function () view"
                          }
                        },
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1531:13:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 55,
                      "nodeType": "ExpressionStatement",
                      "src": "1531:13:0"
                    },
                    {
                      "id": 56,
                      "nodeType": "PlaceholderStatement",
                      "src": "1554:1:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 51,
                  "nodeType": "StructuredDocumentation",
                  "src": "1418:77:0",
                  "text": " @dev Throws if called by any account other than the owner."
                },
                "id": 58,
                "name": "onlyOwner",
                "nameLocation": "1509:9:0",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 52,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1518:2:0"
                },
                "src": "1500:62:0",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 66,
                  "nodeType": "Block",
                  "src": "1693:30:0",
                  "statements": [
                    {
                      "expression": {
                        "id": 64,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "1710:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 63,
                      "id": 65,
                      "nodeType": "Return",
                      "src": "1703:13:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 59,
                  "nodeType": "StructuredDocumentation",
                  "src": "1568:65:0",
                  "text": " @dev Returns the address of the current owner."
                },
                "functionSelector": "8da5cb5b",
                "id": 67,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "owner",
                "nameLocation": "1647:5:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 60,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1652:2:0"
                },
                "returnParameters": {
                  "id": 63,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 62,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 67,
                      "src": "1684:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 61,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1684:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1683:9:0"
                },
                "scope": 147,
                "src": "1638:85:0",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 83,
                  "nodeType": "Block",
                  "src": "1841:117:0",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 75,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 71,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 67,
                            "src": "1855:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 72,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1855:7:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 73,
                            "name": "_msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 961,
                            "src": "1866:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                              "typeString": "function () view returns (address)"
                            }
                          },
                          "id": 74,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1866:12:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1855:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 82,
                      "nodeType": "IfStatement",
                      "src": "1851:101:0",
                      "trueBody": {
                        "id": 81,
                        "nodeType": "Block",
                        "src": "1880:72:0",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 77,
                                    "name": "_msgSender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 961,
                                    "src": "1928:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 78,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1928:12:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 76,
                                "name": "OwnableUnauthorizedAccount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 13,
                                "src": "1901:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 79,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1901:40:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 80,
                            "nodeType": "RevertStatement",
                            "src": "1894:47:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 68,
                  "nodeType": "StructuredDocumentation",
                  "src": "1729:62:0",
                  "text": " @dev Throws if the sender is not the owner."
                },
                "id": 84,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_checkOwner",
                "nameLocation": "1805:11:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 69,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1816:2:0"
                },
                "returnParameters": {
                  "id": 70,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1841:0:0"
                },
                "scope": 147,
                "src": "1796:162:0",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 97,
                  "nodeType": "Block",
                  "src": "2347:47:0",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 93,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2384:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 92,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2376:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 91,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "2376:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 94,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2376:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 90,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 146,
                          "src": "2357:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 95,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2357:30:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 96,
                      "nodeType": "ExpressionStatement",
                      "src": "2357:30:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 85,
                  "nodeType": "StructuredDocumentation",
                  "src": "1964:324:0",
                  "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
                },
                "functionSelector": "715018a6",
                "id": 98,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 88,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 87,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2337:9:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 58,
                      "src": "2337:9:0"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2337:9:0"
                  }
                ],
                "name": "renounceOwnership",
                "nameLocation": "2302:17:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 86,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2319:2:0"
                },
                "returnParameters": {
                  "id": 89,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2347:0:0"
                },
                "scope": 147,
                "src": "2293:101:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 125,
                  "nodeType": "Block",
                  "src": "2613:145:0",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 106,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 101,
                          "src": "2627:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2647:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 108,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2639:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 107,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2639:7:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2639:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2627:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 120,
                      "nodeType": "IfStatement",
                      "src": "2623:91:0",
                      "trueBody": {
                        "id": 119,
                        "nodeType": "Block",
                        "src": "2651:63:0",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 115,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2700:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 114,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2692:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 113,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2692:7:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 116,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2692:10:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 112,
                                "name": "OwnableInvalidOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 18,
                                "src": "2672:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 117,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2672:31:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 118,
                            "nodeType": "RevertStatement",
                            "src": "2665:38:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 122,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 101,
                            "src": "2742:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 121,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 146,
                          "src": "2723:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2723:28:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 124,
                      "nodeType": "ExpressionStatement",
                      "src": "2723:28:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 99,
                  "nodeType": "StructuredDocumentation",
                  "src": "2400:138:0",
                  "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                },
                "functionSelector": "f2fde38b",
                "id": 126,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 104,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 103,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2603:9:0"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 58,
                      "src": "2603:9:0"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2603:9:0"
                  }
                ],
                "name": "transferOwnership",
                "nameLocation": "2552:17:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 102,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 101,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "2578:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 126,
                      "src": "2570:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 100,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2570:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2569:18:0"
                },
                "returnParameters": {
                  "id": 105,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2613:0:0"
                },
                "scope": 147,
                "src": "2543:215:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 145,
                  "nodeType": "Block",
                  "src": "2975:124:0",
                  "statements": [
                    {
                      "assignments": [
                        133
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 133,
                          "mutability": "mutable",
                          "name": "oldOwner",
                          "nameLocation": "2993:8:0",
                          "nodeType": "VariableDeclaration",
                          "scope": 145,
                          "src": "2985:16:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 132,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2985:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 135,
                      "initialValue": {
                        "id": 134,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "3004:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2985:25:0"
                    },
                    {
                      "expression": {
                        "id": 138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 136,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8,
                          "src": "3020:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 137,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 129,
                          "src": "3029:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3020:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 139,
                      "nodeType": "ExpressionStatement",
                      "src": "3020:17:0"
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 141,
                            "name": "oldOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 133,
                            "src": "3073:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 142,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 129,
                            "src": "3083:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 140,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24,
                          "src": "3052:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3052:40:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 144,
                      "nodeType": "EmitStatement",
                      "src": "3047:45:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 127,
                  "nodeType": "StructuredDocumentation",
                  "src": "2764:143:0",
                  "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
                },
                "id": 146,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transferOwnership",
                "nameLocation": "2921:18:0",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 130,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 129,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nameLocation": "2948:8:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 146,
                      "src": "2940:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 128,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2940:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2939:18:0"
                },
                "returnParameters": {
                  "id": 131,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2975:0:0"
                },
                "scope": 147,
                "src": "2912:187:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 148,
            "src": "663:2438:0",
            "usedErrors": [
              13,
              18
            ],
            "usedEvents": [
              24
            ]
          }
        ],
        "src": "102:3000:0"
      }
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "id": 1,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
        "exportedSymbols": {
          "IERC1155Errors": [
            284
          ],
          "IERC20Errors": [
            189
          ],
          "IERC721Errors": [
            237
          ]
        },
        "id": 285,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 149,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "112:24:1"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC20Errors",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 150,
              "nodeType": "StructuredDocumentation",
              "src": "138:139:1",
              "text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
            },
            "fullyImplemented": true,
            "id": 189,
            "linearizedBaseContracts": [
              189
            ],
            "name": "IERC20Errors",
            "nameLocation": "288:12:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 151,
                  "nodeType": "StructuredDocumentation",
                  "src": "307:309:1",
                  "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
                },
                "errorSelector": "e450d38c",
                "id": 159,
                "name": "ERC20InsufficientBalance",
                "nameLocation": "627:24:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 158,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 153,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "660:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 159,
                      "src": "652:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 152,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "652:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 155,
                      "mutability": "mutable",
                      "name": "balance",
                      "nameLocation": "676:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 159,
                      "src": "668:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 154,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "668:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 157,
                      "mutability": "mutable",
                      "name": "needed",
                      "nameLocation": "693:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 159,
                      "src": "685:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 156,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "685:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "651:49:1"
                },
                "src": "621:80:1"
              },
              {
                "documentation": {
                  "id": 160,
                  "nodeType": "StructuredDocumentation",
                  "src": "707:152:1",
                  "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                },
                "errorSelector": "96c6fd1e",
                "id": 164,
                "name": "ERC20InvalidSender",
                "nameLocation": "870:18:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 163,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 162,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "897:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 164,
                      "src": "889:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 161,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "889:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "888:16:1"
                },
                "src": "864:41:1"
              },
              {
                "documentation": {
                  "id": 165,
                  "nodeType": "StructuredDocumentation",
                  "src": "911:159:1",
                  "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                },
                "errorSelector": "ec442f05",
                "id": 169,
                "name": "ERC20InvalidReceiver",
                "nameLocation": "1081:20:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 168,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 167,
                      "mutability": "mutable",
                      "name": "receiver",
                      "nameLocation": "1110:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 169,
                      "src": "1102:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 166,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1102:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1101:18:1"
                },
                "src": "1075:45:1"
              },
              {
                "documentation": {
                  "id": 170,
                  "nodeType": "StructuredDocumentation",
                  "src": "1126:345:1",
                  "text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
                },
                "errorSelector": "fb8f41b2",
                "id": 178,
                "name": "ERC20InsufficientAllowance",
                "nameLocation": "1482:26:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 177,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 172,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "1517:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 178,
                      "src": "1509:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 171,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1509:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 174,
                      "mutability": "mutable",
                      "name": "allowance",
                      "nameLocation": "1534:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 178,
                      "src": "1526:17:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 173,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1526:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 176,
                      "mutability": "mutable",
                      "name": "needed",
                      "nameLocation": "1553:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 178,
                      "src": "1545:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 175,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1545:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1508:52:1"
                },
                "src": "1476:85:1"
              },
              {
                "documentation": {
                  "id": 179,
                  "nodeType": "StructuredDocumentation",
                  "src": "1567:174:1",
                  "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                },
                "errorSelector": "e602df05",
                "id": 183,
                "name": "ERC20InvalidApprover",
                "nameLocation": "1752:20:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 182,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 181,
                      "mutability": "mutable",
                      "name": "approver",
                      "nameLocation": "1781:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 183,
                      "src": "1773:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 180,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1773:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1772:18:1"
                },
                "src": "1746:45:1"
              },
              {
                "documentation": {
                  "id": 184,
                  "nodeType": "StructuredDocumentation",
                  "src": "1797:195:1",
                  "text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
                },
                "errorSelector": "94280d62",
                "id": 188,
                "name": "ERC20InvalidSpender",
                "nameLocation": "2003:19:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 187,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 186,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2031:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 188,
                      "src": "2023:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 185,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2023:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2022:17:1"
                },
                "src": "1997:43:1"
              }
            ],
            "scope": 285,
            "src": "278:1764:1",
            "usedErrors": [
              159,
              164,
              169,
              178,
              183,
              188
            ],
            "usedEvents": []
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC721Errors",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 190,
              "nodeType": "StructuredDocumentation",
              "src": "2044:141:1",
              "text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
            },
            "fullyImplemented": true,
            "id": 237,
            "linearizedBaseContracts": [
              237
            ],
            "name": "IERC721Errors",
            "nameLocation": "2196:13:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 191,
                  "nodeType": "StructuredDocumentation",
                  "src": "2216:219:1",
                  "text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
                },
                "errorSelector": "89c62b64",
                "id": 195,
                "name": "ERC721InvalidOwner",
                "nameLocation": "2446:18:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 194,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 193,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "2473:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 195,
                      "src": "2465:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 192,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2465:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2464:15:1"
                },
                "src": "2440:40:1"
              },
              {
                "documentation": {
                  "id": 196,
                  "nodeType": "StructuredDocumentation",
                  "src": "2486:132:1",
                  "text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
                },
                "errorSelector": "7e273289",
                "id": 200,
                "name": "ERC721NonexistentToken",
                "nameLocation": "2629:22:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 199,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 198,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "2660:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 200,
                      "src": "2652:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 197,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2652:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2651:17:1"
                },
                "src": "2623:46:1"
              },
              {
                "documentation": {
                  "id": 201,
                  "nodeType": "StructuredDocumentation",
                  "src": "2675:289:1",
                  "text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
                },
                "errorSelector": "64283d7b",
                "id": 209,
                "name": "ERC721IncorrectOwner",
                "nameLocation": "2975:20:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 208,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 203,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "3004:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 209,
                      "src": "2996:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 202,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2996:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 205,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "3020:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 209,
                      "src": "3012:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 204,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3012:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 207,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3037:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 209,
                      "src": "3029:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 206,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3029:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2995:48:1"
                },
                "src": "2969:75:1"
              },
              {
                "documentation": {
                  "id": 210,
                  "nodeType": "StructuredDocumentation",
                  "src": "3050:152:1",
                  "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                },
                "errorSelector": "73c6ac6e",
                "id": 214,
                "name": "ERC721InvalidSender",
                "nameLocation": "3213:19:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 213,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 212,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "3241:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 214,
                      "src": "3233:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 211,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3233:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3232:16:1"
                },
                "src": "3207:42:1"
              },
              {
                "documentation": {
                  "id": 215,
                  "nodeType": "StructuredDocumentation",
                  "src": "3255:159:1",
                  "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                },
                "errorSelector": "64a0ae92",
                "id": 219,
                "name": "ERC721InvalidReceiver",
                "nameLocation": "3425:21:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 217,
                      "mutability": "mutable",
                      "name": "receiver",
                      "nameLocation": "3455:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 219,
                      "src": "3447:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3447:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3446:18:1"
                },
                "src": "3419:46:1"
              },
              {
                "documentation": {
                  "id": 220,
                  "nodeType": "StructuredDocumentation",
                  "src": "3471:247:1",
                  "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
                },
                "errorSelector": "177e802f",
                "id": 226,
                "name": "ERC721InsufficientApproval",
                "nameLocation": "3729:26:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 225,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 222,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "3764:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 226,
                      "src": "3756:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 221,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3756:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 224,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "3782:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 226,
                      "src": "3774:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 223,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3774:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3755:35:1"
                },
                "src": "3723:68:1"
              },
              {
                "documentation": {
                  "id": 227,
                  "nodeType": "StructuredDocumentation",
                  "src": "3797:174:1",
                  "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                },
                "errorSelector": "a9fbf51f",
                "id": 231,
                "name": "ERC721InvalidApprover",
                "nameLocation": "3982:21:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 230,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 229,
                      "mutability": "mutable",
                      "name": "approver",
                      "nameLocation": "4012:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 231,
                      "src": "4004:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 228,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4004:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4003:18:1"
                },
                "src": "3976:46:1"
              },
              {
                "documentation": {
                  "id": 232,
                  "nodeType": "StructuredDocumentation",
                  "src": "4028:197:1",
                  "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                },
                "errorSelector": "5b08ba18",
                "id": 236,
                "name": "ERC721InvalidOperator",
                "nameLocation": "4236:21:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 235,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 234,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "4266:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 236,
                      "src": "4258:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 233,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4258:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4257:18:1"
                },
                "src": "4230:46:1"
              }
            ],
            "scope": 285,
            "src": "2186:2092:1",
            "usedErrors": [
              195,
              200,
              209,
              214,
              219,
              226,
              231,
              236
            ],
            "usedEvents": []
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC1155Errors",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 238,
              "nodeType": "StructuredDocumentation",
              "src": "4280:143:1",
              "text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
            },
            "fullyImplemented": true,
            "id": 284,
            "linearizedBaseContracts": [
              284
            ],
            "name": "IERC1155Errors",
            "nameLocation": "4434:14:1",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 239,
                  "nodeType": "StructuredDocumentation",
                  "src": "4455:361:1",
                  "text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
                },
                "errorSelector": "03dee4c5",
                "id": 249,
                "name": "ERC1155InsufficientBalance",
                "nameLocation": "4827:26:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 248,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 241,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "4862:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 249,
                      "src": "4854:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 240,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4854:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 243,
                      "mutability": "mutable",
                      "name": "balance",
                      "nameLocation": "4878:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 249,
                      "src": "4870:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 242,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4870:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 245,
                      "mutability": "mutable",
                      "name": "needed",
                      "nameLocation": "4895:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 249,
                      "src": "4887:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 244,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4887:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 247,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "4911:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 249,
                      "src": "4903:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 246,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4903:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4853:66:1"
                },
                "src": "4821:99:1"
              },
              {
                "documentation": {
                  "id": 250,
                  "nodeType": "StructuredDocumentation",
                  "src": "4926:152:1",
                  "text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
                },
                "errorSelector": "01a83514",
                "id": 254,
                "name": "ERC1155InvalidSender",
                "nameLocation": "5089:20:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 253,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 252,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "5118:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 254,
                      "src": "5110:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 251,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5110:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5109:16:1"
                },
                "src": "5083:43:1"
              },
              {
                "documentation": {
                  "id": 255,
                  "nodeType": "StructuredDocumentation",
                  "src": "5132:159:1",
                  "text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
                },
                "errorSelector": "57f447ce",
                "id": 259,
                "name": "ERC1155InvalidReceiver",
                "nameLocation": "5302:22:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 258,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 257,
                      "mutability": "mutable",
                      "name": "receiver",
                      "nameLocation": "5333:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 259,
                      "src": "5325:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 256,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5325:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5324:18:1"
                },
                "src": "5296:47:1"
              },
              {
                "documentation": {
                  "id": 260,
                  "nodeType": "StructuredDocumentation",
                  "src": "5349:256:1",
                  "text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
                },
                "errorSelector": "e237d922",
                "id": 266,
                "name": "ERC1155MissingApprovalForAll",
                "nameLocation": "5616:28:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 265,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 262,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "5653:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 266,
                      "src": "5645:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 261,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5645:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 264,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "5671:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 266,
                      "src": "5663:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 263,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5663:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5644:33:1"
                },
                "src": "5610:68:1"
              },
              {
                "documentation": {
                  "id": 267,
                  "nodeType": "StructuredDocumentation",
                  "src": "5684:174:1",
                  "text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
                },
                "errorSelector": "3e31884e",
                "id": 271,
                "name": "ERC1155InvalidApprover",
                "nameLocation": "5869:22:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 270,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 269,
                      "mutability": "mutable",
                      "name": "approver",
                      "nameLocation": "5900:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 271,
                      "src": "5892:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 268,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5892:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5891:18:1"
                },
                "src": "5863:47:1"
              },
              {
                "documentation": {
                  "id": 272,
                  "nodeType": "StructuredDocumentation",
                  "src": "5916:197:1",
                  "text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
                },
                "errorSelector": "ced3e100",
                "id": 276,
                "name": "ERC1155InvalidOperator",
                "nameLocation": "6124:22:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 275,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 274,
                      "mutability": "mutable",
                      "name": "operator",
                      "nameLocation": "6155:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 276,
                      "src": "6147:16:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 273,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6147:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6146:18:1"
                },
                "src": "6118:47:1"
              },
              {
                "documentation": {
                  "id": 277,
                  "nodeType": "StructuredDocumentation",
                  "src": "6171:280:1",
                  "text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
                },
                "errorSelector": "5b059991",
                "id": 283,
                "name": "ERC1155InvalidArrayLength",
                "nameLocation": "6462:25:1",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 282,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 279,
                      "mutability": "mutable",
                      "name": "idsLength",
                      "nameLocation": "6496:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 283,
                      "src": "6488:17:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 278,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6488:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 281,
                      "mutability": "mutable",
                      "name": "valuesLength",
                      "nameLocation": "6515:12:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 283,
                      "src": "6507:20:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 280,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6507:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6487:41:1"
                },
                "src": "6456:73:1"
              }
            ],
            "scope": 285,
            "src": "4424:2107:1",
            "usedErrors": [
              249,
              254,
              259,
              266,
              271,
              276,
              283
            ],
            "usedEvents": []
          }
        ],
        "src": "112:6420:1"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "id": 2,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        "exportedSymbols": {
          "Context": [
            979
          ],
          "ERC20": [
            799
          ],
          "IERC20": [
            877
          ],
          "IERC20Errors": [
            189
          ],
          "IERC20Metadata": [
            949
          ]
        },
        "id": 800,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 286,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "105:24:2"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "file": "./IERC20.sol",
            "id": 288,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 800,
            "sourceUnit": 878,
            "src": "131:36:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 287,
                  "name": "IERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 877,
                  "src": "139:6:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
            "file": "./extensions/IERC20Metadata.sol",
            "id": 290,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 800,
            "sourceUnit": 950,
            "src": "168:63:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 289,
                  "name": "IERC20Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 949,
                  "src": "176:14:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../../utils/Context.sol",
            "id": 292,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 800,
            "sourceUnit": 980,
            "src": "232:48:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 291,
                  "name": "Context",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 979,
                  "src": "240:7:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
            "file": "../../interfaces/draft-IERC6093.sol",
            "id": 294,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 800,
            "sourceUnit": 285,
            "src": "281:65:2",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 293,
                  "name": "IERC20Errors",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 189,
                  "src": "289:12:2",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": true,
            "baseContracts": [
              {
                "baseName": {
                  "id": 296,
                  "name": "Context",
                  "nameLocations": [
                    "1428:7:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 979,
                  "src": "1428:7:2"
                },
                "id": 297,
                "nodeType": "InheritanceSpecifier",
                "src": "1428:7:2"
              },
              {
                "baseName": {
                  "id": 298,
                  "name": "IERC20",
                  "nameLocations": [
                    "1437:6:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 877,
                  "src": "1437:6:2"
                },
                "id": 299,
                "nodeType": "InheritanceSpecifier",
                "src": "1437:6:2"
              },
              {
                "baseName": {
                  "id": 300,
                  "name": "IERC20Metadata",
                  "nameLocations": [
                    "1445:14:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 949,
                  "src": "1445:14:2"
                },
                "id": 301,
                "nodeType": "InheritanceSpecifier",
                "src": "1445:14:2"
              },
              {
                "baseName": {
                  "id": 302,
                  "name": "IERC20Errors",
                  "nameLocations": [
                    "1461:12:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 189,
                  "src": "1461:12:2"
                },
                "id": 303,
                "nodeType": "InheritanceSpecifier",
                "src": "1461:12:2"
              }
            ],
            "canonicalName": "ERC20",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 295,
              "nodeType": "StructuredDocumentation",
              "src": "348:1052:2",
              "text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
            },
            "fullyImplemented": true,
            "id": 799,
            "linearizedBaseContracts": [
              799,
              189,
              949,
              877,
              979
            ],
            "name": "ERC20",
            "nameLocation": "1419:5:2",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 307,
                "mutability": "mutable",
                "name": "_balances",
                "nameLocation": "1524:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 799,
                "src": "1480:53:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 306,
                  "keyName": "account",
                  "keyNameLocation": "1496:7:2",
                  "keyType": {
                    "id": 304,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1488:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1480:35:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 305,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1507:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 313,
                "mutability": "mutable",
                "name": "_allowances",
                "nameLocation": "1612:11:2",
                "nodeType": "VariableDeclaration",
                "scope": 799,
                "src": "1540:83:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 312,
                  "keyName": "account",
                  "keyNameLocation": "1556:7:2",
                  "keyType": {
                    "id": 308,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1548:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1540:63:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 311,
                    "keyName": "spender",
                    "keyNameLocation": "1583:7:2",
                    "keyType": {
                      "id": 309,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1575:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1567:35:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 310,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1594:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 315,
                "mutability": "mutable",
                "name": "_totalSupply",
                "nameLocation": "1646:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 799,
                "src": "1630:28:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 314,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1630:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 317,
                "mutability": "mutable",
                "name": "_name",
                "nameLocation": "1680:5:2",
                "nodeType": "VariableDeclaration",
                "scope": 799,
                "src": "1665:20:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 316,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1665:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 319,
                "mutability": "mutable",
                "name": "_symbol",
                "nameLocation": "1706:7:2",
                "nodeType": "VariableDeclaration",
                "scope": 799,
                "src": "1691:22:2",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 318,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1691:6:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 335,
                  "nodeType": "Block",
                  "src": "1952:57:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 329,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 327,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 317,
                          "src": "1962:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 328,
                          "name": "name_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "1970:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "1962:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 330,
                      "nodeType": "ExpressionStatement",
                      "src": "1962:13:2"
                    },
                    {
                      "expression": {
                        "id": 333,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 331,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 319,
                          "src": "1985:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 332,
                          "name": "symbol_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 324,
                          "src": "1995:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "1985:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 334,
                      "nodeType": "ExpressionStatement",
                      "src": "1985:17:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 320,
                  "nodeType": "StructuredDocumentation",
                  "src": "1720:171:2",
                  "text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
                },
                "id": 336,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 325,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 322,
                      "mutability": "mutable",
                      "name": "name_",
                      "nameLocation": "1922:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "1908:19:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 321,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1908:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 324,
                      "mutability": "mutable",
                      "name": "symbol_",
                      "nameLocation": "1943:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 336,
                      "src": "1929:21:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 323,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1929:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1907:44:2"
                },
                "returnParameters": {
                  "id": 326,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1952:0:2"
                },
                "scope": 799,
                "src": "1896:113:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "baseFunctions": [
                  936
                ],
                "body": {
                  "id": 344,
                  "nodeType": "Block",
                  "src": "2134:29:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 342,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 317,
                        "src": "2151:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 341,
                      "id": 343,
                      "nodeType": "Return",
                      "src": "2144:12:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 337,
                  "nodeType": "StructuredDocumentation",
                  "src": "2015:54:2",
                  "text": " @dev Returns the name of the token."
                },
                "functionSelector": "06fdde03",
                "id": 345,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "name",
                "nameLocation": "2083:4:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 338,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2087:2:2"
                },
                "returnParameters": {
                  "id": 341,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 340,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 345,
                      "src": "2119:13:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 339,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2119:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2118:15:2"
                },
                "scope": 799,
                "src": "2074:89:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  942
                ],
                "body": {
                  "id": 353,
                  "nodeType": "Block",
                  "src": "2338:31:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 351,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 319,
                        "src": "2355:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 350,
                      "id": 352,
                      "nodeType": "Return",
                      "src": "2348:14:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 346,
                  "nodeType": "StructuredDocumentation",
                  "src": "2169:102:2",
                  "text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
                },
                "functionSelector": "95d89b41",
                "id": 354,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "symbol",
                "nameLocation": "2285:6:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 347,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2291:2:2"
                },
                "returnParameters": {
                  "id": 350,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 349,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 354,
                      "src": "2323:13:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 348,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2323:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2322:15:2"
                },
                "scope": 799,
                "src": "2276:93:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  948
                ],
                "body": {
                  "id": 362,
                  "nodeType": "Block",
                  "src": "3058:26:2",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "3138",
                        "id": 360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3075:2:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        "value": "18"
                      },
                      "functionReturnParameters": 359,
                      "id": 361,
                      "nodeType": "Return",
                      "src": "3068:9:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 355,
                  "nodeType": "StructuredDocumentation",
                  "src": "2375:622:2",
                  "text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
                },
                "functionSelector": "313ce567",
                "id": 363,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nameLocation": "3011:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 356,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3019:2:2"
                },
                "returnParameters": {
                  "id": 359,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 363,
                      "src": "3051:5:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "3051:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3050:7:2"
                },
                "scope": 799,
                "src": "3002:82:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  826
                ],
                "body": {
                  "id": 371,
                  "nodeType": "Block",
                  "src": "3205:36:2",
                  "statements": [
                    {
                      "expression": {
                        "id": 369,
                        "name": "_totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 315,
                        "src": "3222:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 368,
                      "id": 370,
                      "nodeType": "Return",
                      "src": "3215:19:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 364,
                  "nodeType": "StructuredDocumentation",
                  "src": "3090:49:2",
                  "text": " @dev See {IERC20-totalSupply}."
                },
                "functionSelector": "18160ddd",
                "id": 372,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nameLocation": "3153:11:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 365,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3164:2:2"
                },
                "returnParameters": {
                  "id": 368,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 367,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 372,
                      "src": "3196:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 366,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3196:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3195:9:2"
                },
                "scope": 799,
                "src": "3144:97:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  834
                ],
                "body": {
                  "id": 384,
                  "nodeType": "Block",
                  "src": "3373:42:2",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "id": 380,
                          "name": "_balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 307,
                          "src": "3390:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 382,
                        "indexExpression": {
                          "id": 381,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 375,
                          "src": "3400:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3390:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 379,
                      "id": 383,
                      "nodeType": "Return",
                      "src": "3383:25:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 373,
                  "nodeType": "StructuredDocumentation",
                  "src": "3247:47:2",
                  "text": " @dev See {IERC20-balanceOf}."
                },
                "functionSelector": "70a08231",
                "id": 385,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nameLocation": "3308:9:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 376,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 375,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "3326:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 385,
                      "src": "3318:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 374,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3318:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3317:17:2"
                },
                "returnParameters": {
                  "id": 379,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 378,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 385,
                      "src": "3364:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 377,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3364:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3363:9:2"
                },
                "scope": 799,
                "src": "3299:116:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  844
                ],
                "body": {
                  "id": 408,
                  "nodeType": "Block",
                  "src": "3685:103:2",
                  "statements": [
                    {
                      "assignments": [
                        396
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 396,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "3703:5:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 408,
                          "src": "3695:13:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 395,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3695:7:2",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 399,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 397,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 961,
                          "src": "3711:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3711:12:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3695:28:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 401,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 396,
                            "src": "3743:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 402,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 388,
                            "src": "3750:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 403,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 390,
                            "src": "3754:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 400,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 529,
                          "src": "3733:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 404,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3733:27:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 405,
                      "nodeType": "ExpressionStatement",
                      "src": "3733:27:2"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3777:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 394,
                      "id": 407,
                      "nodeType": "Return",
                      "src": "3770:11:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 386,
                  "nodeType": "StructuredDocumentation",
                  "src": "3421:184:2",
                  "text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
                },
                "functionSelector": "a9059cbb",
                "id": 409,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nameLocation": "3619:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 391,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 388,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "3636:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "3628:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 387,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3628:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 390,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "3648:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "3640:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 389,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3640:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3627:27:2"
                },
                "returnParameters": {
                  "id": 394,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 393,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "3679:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 392,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3679:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3678:6:2"
                },
                "scope": 799,
                "src": "3610:178:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  854
                ],
                "body": {
                  "id": 425,
                  "nodeType": "Block",
                  "src": "3935:51:2",
                  "statements": [
                    {
                      "expression": {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 419,
                            "name": "_allowances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 313,
                            "src": "3952:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 421,
                          "indexExpression": {
                            "id": 420,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 412,
                            "src": "3964:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3952:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 423,
                        "indexExpression": {
                          "id": 422,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 414,
                          "src": "3971:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3952:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 418,
                      "id": 424,
                      "nodeType": "Return",
                      "src": "3945:34:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 410,
                  "nodeType": "StructuredDocumentation",
                  "src": "3794:47:2",
                  "text": " @dev See {IERC20-allowance}."
                },
                "functionSelector": "dd62ed3e",
                "id": 426,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nameLocation": "3855:9:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 415,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 412,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "3873:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 426,
                      "src": "3865:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 411,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3865:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 414,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "3888:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 426,
                      "src": "3880:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 413,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3880:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3864:32:2"
                },
                "returnParameters": {
                  "id": 418,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 417,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 426,
                      "src": "3926:7:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 416,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3926:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "3925:9:2"
                },
                "scope": 799,
                "src": "3846:140:2",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  864
                ],
                "body": {
                  "id": 449,
                  "nodeType": "Block",
                  "src": "4372:107:2",
                  "statements": [
                    {
                      "assignments": [
                        437
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 437,
                          "mutability": "mutable",
                          "name": "owner",
                          "nameLocation": "4390:5:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 449,
                          "src": "4382:13:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 436,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4382:7:2",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 440,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 438,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 961,
                          "src": "4398:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4398:12:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4382:28:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 442,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 437,
                            "src": "4429:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 443,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 429,
                            "src": "4436:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 444,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "4445:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 441,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            690,
                            750
                          ],
                          "referencedDeclaration": 690,
                          "src": "4420:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4420:31:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 446,
                      "nodeType": "ExpressionStatement",
                      "src": "4420:31:2"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 447,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4468:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 435,
                      "id": 448,
                      "nodeType": "Return",
                      "src": "4461:11:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 427,
                  "nodeType": "StructuredDocumentation",
                  "src": "3992:296:2",
                  "text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
                },
                "functionSelector": "095ea7b3",
                "id": 450,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nameLocation": "4302:7:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 432,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 429,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "4318:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 450,
                      "src": "4310:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 428,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4310:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 431,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "4335:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 450,
                      "src": "4327:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 430,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4327:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4309:32:2"
                },
                "returnParameters": {
                  "id": 435,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 434,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 450,
                      "src": "4366:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 433,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4366:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "4365:6:2"
                },
                "scope": 799,
                "src": "4293:186:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  876
                ],
                "body": {
                  "id": 481,
                  "nodeType": "Block",
                  "src": "5132:151:2",
                  "statements": [
                    {
                      "assignments": [
                        463
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 463,
                          "mutability": "mutable",
                          "name": "spender",
                          "nameLocation": "5150:7:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 481,
                          "src": "5142:15:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 462,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "5142:7:2",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 466,
                      "initialValue": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 464,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 961,
                          "src": "5160:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 465,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5160:12:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5142:30:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 468,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 453,
                            "src": "5198:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 469,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 463,
                            "src": "5204:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 470,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 457,
                            "src": "5213:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 467,
                          "name": "_spendAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "5182:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 471,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5182:37:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 472,
                      "nodeType": "ExpressionStatement",
                      "src": "5182:37:2"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 474,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 453,
                            "src": "5239:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 475,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 455,
                            "src": "5245:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 476,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 457,
                            "src": "5249:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 473,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 529,
                          "src": "5229:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 477,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5229:26:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 478,
                      "nodeType": "ExpressionStatement",
                      "src": "5229:26:2"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5272:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 461,
                      "id": 480,
                      "nodeType": "Return",
                      "src": "5265:11:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 451,
                  "nodeType": "StructuredDocumentation",
                  "src": "4485:549:2",
                  "text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
                },
                "functionSelector": "23b872dd",
                "id": 482,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nameLocation": "5048:12:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 458,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 453,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "5069:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 482,
                      "src": "5061:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 452,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5061:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 455,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "5083:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 482,
                      "src": "5075:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 454,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5075:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 457,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "5095:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 482,
                      "src": "5087:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 456,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5087:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5060:41:2"
                },
                "returnParameters": {
                  "id": 461,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 460,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 482,
                      "src": "5126:4:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 459,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5126:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5125:6:2"
                },
                "scope": 799,
                "src": "5039:244:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 528,
                  "nodeType": "Block",
                  "src": "5725:231:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 492,
                          "name": "from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 485,
                          "src": "5739:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 495,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5755:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5747:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 493,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5747:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5747:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5739:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 506,
                      "nodeType": "IfStatement",
                      "src": "5735:86:2",
                      "trueBody": {
                        "id": 505,
                        "nodeType": "Block",
                        "src": "5759:62:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 501,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "5807:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 500,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5799:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 499,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5799:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 502,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5799:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 498,
                                "name": "ERC20InvalidSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 164,
                                "src": "5780:18:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 503,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5780:30:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 504,
                            "nodeType": "RevertStatement",
                            "src": "5773:37:2"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 507,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 487,
                          "src": "5834:2:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 510,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5848:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 509,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5840:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 508,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "5840:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 511,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5840:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5834:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 521,
                      "nodeType": "IfStatement",
                      "src": "5830:86:2",
                      "trueBody": {
                        "id": 520,
                        "nodeType": "Block",
                        "src": "5852:64:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 516,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "5902:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 515,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5894:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 514,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5894:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 517,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5894:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 513,
                                "name": "ERC20InvalidReceiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 169,
                                "src": "5873:20:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 518,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5873:32:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 519,
                            "nodeType": "RevertStatement",
                            "src": "5866:39:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 523,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 485,
                            "src": "5933:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 524,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 487,
                            "src": "5939:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 525,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 489,
                            "src": "5943:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 522,
                          "name": "_update",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 606,
                          "src": "5925:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 526,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5925:24:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 527,
                      "nodeType": "ExpressionStatement",
                      "src": "5925:24:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 483,
                  "nodeType": "StructuredDocumentation",
                  "src": "5289:362:2",
                  "text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                },
                "id": 529,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transfer",
                "nameLocation": "5665:9:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 490,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 485,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "5683:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 529,
                      "src": "5675:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 484,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5675:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 487,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "5697:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 529,
                      "src": "5689:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 486,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5689:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 489,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "5709:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 529,
                      "src": "5701:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 488,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5701:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "5674:41:2"
                },
                "returnParameters": {
                  "id": 491,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5725:0:2"
                },
                "scope": 799,
                "src": "5656:300:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 605,
                  "nodeType": "Block",
                  "src": "6346:1032:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 539,
                          "name": "from",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 532,
                          "src": "6360:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 542,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6376:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 541,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6368:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 540,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6368:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6368:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6360:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 576,
                        "nodeType": "Block",
                        "src": "6534:362:2",
                        "statements": [
                          {
                            "assignments": [
                              551
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 551,
                                "mutability": "mutable",
                                "name": "fromBalance",
                                "nameLocation": "6556:11:2",
                                "nodeType": "VariableDeclaration",
                                "scope": 576,
                                "src": "6548:19:2",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 550,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6548:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 555,
                            "initialValue": {
                              "baseExpression": {
                                "id": 552,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 307,
                                "src": "6570:9:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 554,
                              "indexExpression": {
                                "id": 553,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 532,
                                "src": "6580:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6570:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "6548:37:2"
                          },
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 558,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 556,
                                "name": "fromBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 551,
                                "src": "6603:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 557,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 536,
                                "src": "6617:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6603:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 566,
                            "nodeType": "IfStatement",
                            "src": "6599:115:2",
                            "trueBody": {
                              "id": 565,
                              "nodeType": "Block",
                              "src": "6624:90:2",
                              "statements": [
                                {
                                  "errorCall": {
                                    "arguments": [
                                      {
                                        "id": 560,
                                        "name": "from",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 532,
                                        "src": "6674:4:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 561,
                                        "name": "fromBalance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 551,
                                        "src": "6680:11:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "id": 562,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 536,
                                        "src": "6693:5:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 559,
                                      "name": "ERC20InsufficientBalance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 159,
                                      "src": "6649:24:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256,uint256) pure"
                                      }
                                    },
                                    "id": 563,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6649:50:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 564,
                                  "nodeType": "RevertStatement",
                                  "src": "6642:57:2"
                                }
                              ]
                            }
                          },
                          {
                            "id": 575,
                            "nodeType": "UncheckedBlock",
                            "src": "6727:159:2",
                            "statements": [
                              {
                                "expression": {
                                  "id": 573,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "baseExpression": {
                                      "id": 567,
                                      "name": "_balances",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 307,
                                      "src": "6834:9:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 569,
                                    "indexExpression": {
                                      "id": 568,
                                      "name": "from",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 532,
                                      "src": "6844:4:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "nodeType": "IndexAccess",
                                    "src": "6834:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "=",
                                  "rightHandSide": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 572,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 570,
                                      "name": "fromBalance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 551,
                                      "src": "6852:11:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "-",
                                    "rightExpression": {
                                      "id": 571,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 536,
                                      "src": "6866:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "6852:19:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "6834:37:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 574,
                                "nodeType": "ExpressionStatement",
                                "src": "6834:37:2"
                              }
                            ]
                          }
                        ]
                      },
                      "id": 577,
                      "nodeType": "IfStatement",
                      "src": "6356:540:2",
                      "trueBody": {
                        "id": 549,
                        "nodeType": "Block",
                        "src": "6380:148:2",
                        "statements": [
                          {
                            "expression": {
                              "id": 547,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 545,
                                "name": "_totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 315,
                                "src": "6496:12:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "id": 546,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 536,
                                "src": "6512:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6496:21:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 548,
                            "nodeType": "ExpressionStatement",
                            "src": "6496:21:2"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 583,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 578,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 534,
                          "src": "6910:2:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 581,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6924:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 580,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6916:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 579,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6916:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 582,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6916:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6910:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 597,
                        "nodeType": "Block",
                        "src": "7125:206:2",
                        "statements": [
                          {
                            "id": 596,
                            "nodeType": "UncheckedBlock",
                            "src": "7139:182:2",
                            "statements": [
                              {
                                "expression": {
                                  "id": 594,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "baseExpression": {
                                      "id": 590,
                                      "name": "_balances",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 307,
                                      "src": "7284:9:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                        "typeString": "mapping(address => uint256)"
                                      }
                                    },
                                    "id": 592,
                                    "indexExpression": {
                                      "id": 591,
                                      "name": "to",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 534,
                                      "src": "7294:2:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "nodeType": "IndexAccess",
                                    "src": "7284:13:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "+=",
                                  "rightHandSide": {
                                    "id": 593,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 536,
                                    "src": "7301:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7284:22:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 595,
                                "nodeType": "ExpressionStatement",
                                "src": "7284:22:2"
                              }
                            ]
                          }
                        ]
                      },
                      "id": 598,
                      "nodeType": "IfStatement",
                      "src": "6906:425:2",
                      "trueBody": {
                        "id": 589,
                        "nodeType": "Block",
                        "src": "6928:191:2",
                        "statements": [
                          {
                            "id": 588,
                            "nodeType": "UncheckedBlock",
                            "src": "6942:167:2",
                            "statements": [
                              {
                                "expression": {
                                  "id": 586,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftHandSide": {
                                    "id": 584,
                                    "name": "_totalSupply",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 315,
                                    "src": "7073:12:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "Assignment",
                                  "operator": "-=",
                                  "rightHandSide": {
                                    "id": 585,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 536,
                                    "src": "7089:5:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "7073:21:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 587,
                                "nodeType": "ExpressionStatement",
                                "src": "7073:21:2"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "eventCall": {
                        "arguments": [
                          {
                            "id": 600,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 532,
                            "src": "7355:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 601,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 534,
                            "src": "7361:2:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 602,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 536,
                            "src": "7365:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 599,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 811,
                          "src": "7346:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 603,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7346:25:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 604,
                      "nodeType": "EmitStatement",
                      "src": "7341:30:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 530,
                  "nodeType": "StructuredDocumentation",
                  "src": "5962:304:2",
                  "text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
                },
                "id": 606,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_update",
                "nameLocation": "6280:7:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 537,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 532,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "6296:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 606,
                      "src": "6288:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 531,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6288:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 534,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "6310:2:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 606,
                      "src": "6302:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 533,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6302:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 536,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "6322:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 606,
                      "src": "6314:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 535,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6314:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "6287:41:2"
                },
                "returnParameters": {
                  "id": 538,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6346:0:2"
                },
                "scope": 799,
                "src": "6271:1107:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 638,
                  "nodeType": "Block",
                  "src": "7777:152:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 619,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 614,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 609,
                          "src": "7791:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 617,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7810:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 616,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "7802:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 615,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "7802:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 618,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7802:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "7791:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 628,
                      "nodeType": "IfStatement",
                      "src": "7787:91:2",
                      "trueBody": {
                        "id": 627,
                        "nodeType": "Block",
                        "src": "7814:64:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 623,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "7864:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 622,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7856:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 621,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "7856:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 624,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7856:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 620,
                                "name": "ERC20InvalidReceiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 169,
                                "src": "7835:20:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 625,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7835:32:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 626,
                            "nodeType": "RevertStatement",
                            "src": "7828:39:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 632,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "7903:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7895:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 630,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7895:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 633,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7895:10:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 634,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 609,
                            "src": "7907:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 635,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 611,
                            "src": "7916:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 629,
                          "name": "_update",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 606,
                          "src": "7887:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 636,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7887:35:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 637,
                      "nodeType": "ExpressionStatement",
                      "src": "7887:35:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 607,
                  "nodeType": "StructuredDocumentation",
                  "src": "7384:332:2",
                  "text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
                },
                "id": 639,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_mint",
                "nameLocation": "7730:5:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 612,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 609,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "7744:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 639,
                      "src": "7736:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 608,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7736:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 611,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "7761:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 639,
                      "src": "7753:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 610,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7753:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "7735:32:2"
                },
                "returnParameters": {
                  "id": 613,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "7777:0:2"
                },
                "scope": 799,
                "src": "7721:208:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 671,
                  "nodeType": "Block",
                  "src": "8303:150:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 652,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 647,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 642,
                          "src": "8317:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 650,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8336:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 649,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8328:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 648,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "8328:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 651,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8328:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "8317:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 661,
                      "nodeType": "IfStatement",
                      "src": "8313:89:2",
                      "trueBody": {
                        "id": 660,
                        "nodeType": "Block",
                        "src": "8340:62:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 656,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "8388:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 655,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8380:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 654,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "8380:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 657,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8380:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 653,
                                "name": "ERC20InvalidSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 164,
                                "src": "8361:18:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 658,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8361:30:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 659,
                            "nodeType": "RevertStatement",
                            "src": "8354:37:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 663,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 642,
                            "src": "8419:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 666,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8436:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 665,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "8428:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 664,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "8428:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 667,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8428:10:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 668,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 644,
                            "src": "8440:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 662,
                          "name": "_update",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 606,
                          "src": "8411:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 669,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8411:35:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 670,
                      "nodeType": "ExpressionStatement",
                      "src": "8411:35:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 640,
                  "nodeType": "StructuredDocumentation",
                  "src": "7935:307:2",
                  "text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
                },
                "id": 672,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_burn",
                "nameLocation": "8256:5:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 645,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 642,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "8270:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 672,
                      "src": "8262:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 641,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8262:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 644,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "8287:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 672,
                      "src": "8279:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 643,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8279:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "8261:32:2"
                },
                "returnParameters": {
                  "id": 646,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "8303:0:2"
                },
                "scope": 799,
                "src": "8247:206:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 689,
                  "nodeType": "Block",
                  "src": "9063:54:2",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 683,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 675,
                            "src": "9082:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 684,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 677,
                            "src": "9089:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 685,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 679,
                            "src": "9098:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "hexValue": "74727565",
                            "id": 686,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9105:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 682,
                          "name": "_approve",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            690,
                            750
                          ],
                          "referencedDeclaration": 750,
                          "src": "9073:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                            "typeString": "function (address,address,uint256,bool)"
                          }
                        },
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9073:37:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 688,
                      "nodeType": "ExpressionStatement",
                      "src": "9073:37:2"
                    }
                  ]
                },
                "documentation": {
                  "id": 673,
                  "nodeType": "StructuredDocumentation",
                  "src": "8459:525:2",
                  "text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
                },
                "id": 690,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_approve",
                "nameLocation": "8998:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 680,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 675,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "9015:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 690,
                      "src": "9007:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 674,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9007:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 677,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "9030:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 690,
                      "src": "9022:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 676,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9022:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 679,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "9047:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 690,
                      "src": "9039:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 678,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9039:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9006:47:2"
                },
                "returnParameters": {
                  "id": 681,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9063:0:2"
                },
                "scope": 799,
                "src": "8989:128:2",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 749,
                  "nodeType": "Block",
                  "src": "10047:334:2",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 702,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 693,
                          "src": "10061:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 705,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10078:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10070:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 703,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10070:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 706,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10070:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10061:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 716,
                      "nodeType": "IfStatement",
                      "src": "10057:89:2",
                      "trueBody": {
                        "id": 715,
                        "nodeType": "Block",
                        "src": "10082:64:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 711,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10132:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 710,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "10124:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 709,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10124:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 712,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "10124:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 708,
                                "name": "ERC20InvalidApprover",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 183,
                                "src": "10103:20:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 713,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10103:32:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 714,
                            "nodeType": "RevertStatement",
                            "src": "10096:39:2"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 717,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 695,
                          "src": "10159:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 720,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10178:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 719,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10170:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 718,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "10170:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10170:10:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "10159:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 731,
                      "nodeType": "IfStatement",
                      "src": "10155:90:2",
                      "trueBody": {
                        "id": 730,
                        "nodeType": "Block",
                        "src": "10182:63:2",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "hexValue": "30",
                                      "id": 726,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "10231:1:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      }
                                    ],
                                    "id": 725,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "10223:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 724,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "10223:7:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 727,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "10223:10:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 723,
                                "name": "ERC20InvalidSpender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 188,
                                "src": "10203:19:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
                                  "typeString": "function (address) pure"
                                }
                              },
                              "id": 728,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10203:31:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 729,
                            "nodeType": "RevertStatement",
                            "src": "10196:38:2"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "id": 738,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 732,
                              "name": "_allowances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 313,
                              "src": "10254:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 735,
                            "indexExpression": {
                              "id": 733,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 693,
                              "src": "10266:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "10254:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 736,
                          "indexExpression": {
                            "id": 734,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 695,
                            "src": "10273:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10254:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 737,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 697,
                          "src": "10284:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10254:35:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 739,
                      "nodeType": "ExpressionStatement",
                      "src": "10254:35:2"
                    },
                    {
                      "condition": {
                        "id": 740,
                        "name": "emitEvent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 699,
                        "src": "10303:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 748,
                      "nodeType": "IfStatement",
                      "src": "10299:76:2",
                      "trueBody": {
                        "id": 747,
                        "nodeType": "Block",
                        "src": "10314:61:2",
                        "statements": [
                          {
                            "eventCall": {
                              "arguments": [
                                {
                                  "id": 742,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 693,
                                  "src": "10342:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 743,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 695,
                                  "src": "10349:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 744,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 697,
                                  "src": "10358:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 741,
                                "name": "Approval",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 820,
                                "src": "10333:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                  "typeString": "function (address,address,uint256)"
                                }
                              },
                              "id": 745,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10333:31:2",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 746,
                            "nodeType": "EmitStatement",
                            "src": "10328:36:2"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 691,
                  "nodeType": "StructuredDocumentation",
                  "src": "9123:821:2",
                  "text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
                },
                "id": 750,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_approve",
                "nameLocation": "9958:8:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 700,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 693,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "9975:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "9967:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 692,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9967:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 695,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "9990:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "9982:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 694,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9982:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 697,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "10007:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "9999:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 696,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9999:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 699,
                      "mutability": "mutable",
                      "name": "emitEvent",
                      "nameLocation": "10019:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 750,
                      "src": "10014:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 698,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "10014:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "9966:63:2"
                },
                "returnParameters": {
                  "id": 701,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10047:0:2"
                },
                "scope": 799,
                "src": "9949:432:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 797,
                  "nodeType": "Block",
                  "src": "10752:388:2",
                  "statements": [
                    {
                      "assignments": [
                        761
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 761,
                          "mutability": "mutable",
                          "name": "currentAllowance",
                          "nameLocation": "10770:16:2",
                          "nodeType": "VariableDeclaration",
                          "scope": 797,
                          "src": "10762:24:2",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 760,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "10762:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 766,
                      "initialValue": {
                        "arguments": [
                          {
                            "id": 763,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 753,
                            "src": "10799:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 764,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 755,
                            "src": "10806:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 762,
                          "name": "allowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 426,
                          "src": "10789:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address,address) view returns (uint256)"
                          }
                        },
                        "id": 765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10789:25:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "10762:52:2"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 767,
                          "name": "currentAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 761,
                          "src": "10828:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 770,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10853:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": {
                                  "id": 769,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "10853:7:2",
                                  "typeDescriptions": {}
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                }
                              ],
                              "id": 768,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "10848:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 771,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10848:13:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_uint256",
                              "typeString": "type(uint256)"
                            }
                          },
                          "id": 772,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "10862:3:2",
                          "memberName": "max",
                          "nodeType": "MemberAccess",
                          "src": "10848:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10828:37:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 796,
                      "nodeType": "IfStatement",
                      "src": "10824:310:2",
                      "trueBody": {
                        "id": 795,
                        "nodeType": "Block",
                        "src": "10867:267:2",
                        "statements": [
                          {
                            "condition": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 774,
                                "name": "currentAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 761,
                                "src": "10885:16:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 775,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 757,
                                "src": "10904:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "10885:24:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 784,
                            "nodeType": "IfStatement",
                            "src": "10881:130:2",
                            "trueBody": {
                              "id": 783,
                              "nodeType": "Block",
                              "src": "10911:100:2",
                              "statements": [
                                {
                                  "errorCall": {
                                    "arguments": [
                                      {
                                        "id": 778,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 755,
                                        "src": "10963:7:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 779,
                                        "name": "currentAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 761,
                                        "src": "10972:16:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "id": 780,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 757,
                                        "src": "10990:5:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 777,
                                      "name": "ERC20InsufficientAllowance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 178,
                                      "src": "10936:26:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256,uint256) pure"
                                      }
                                    },
                                    "id": 781,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "10936:60:2",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 782,
                                  "nodeType": "RevertStatement",
                                  "src": "10929:67:2"
                                }
                              ]
                            }
                          },
                          {
                            "id": 794,
                            "nodeType": "UncheckedBlock",
                            "src": "11024:100:2",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 786,
                                      "name": "owner",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 753,
                                      "src": "11061:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "id": 787,
                                      "name": "spender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 755,
                                      "src": "11068:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 790,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 788,
                                        "name": "currentAllowance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 761,
                                        "src": "11077:16:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 789,
                                        "name": "value",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 757,
                                        "src": "11096:5:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "11077:24:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "hexValue": "66616c7365",
                                      "id": 791,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11103:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "false"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    ],
                                    "id": 785,
                                    "name": "_approve",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [
                                      690,
                                      750
                                    ],
                                    "referencedDeclaration": 750,
                                    "src": "11052:8:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
                                      "typeString": "function (address,address,uint256,bool)"
                                    }
                                  },
                                  "id": 792,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11052:57:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_tuple$__$",
                                    "typeString": "tuple()"
                                  }
                                },
                                "id": 793,
                                "nodeType": "ExpressionStatement",
                                "src": "11052:57:2"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": {
                  "id": 751,
                  "nodeType": "StructuredDocumentation",
                  "src": "10387:271:2",
                  "text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
                },
                "id": 798,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_spendAllowance",
                "nameLocation": "10672:15:2",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 758,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 753,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "10696:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 798,
                      "src": "10688:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 752,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10688:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 755,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "10711:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 798,
                      "src": "10703:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 754,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10703:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 757,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "10728:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 798,
                      "src": "10720:13:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 756,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10720:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "10687:47:2"
                },
                "returnParameters": {
                  "id": 759,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10752:0:2"
                },
                "scope": 799,
                "src": "10663:477:2",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 800,
            "src": "1401:9741:2",
            "usedErrors": [
              159,
              164,
              169,
              178,
              183,
              188
            ],
            "usedEvents": [
              811,
              820
            ]
          }
        ],
        "src": "105:11038:2"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "id": 3,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
        "exportedSymbols": {
          "IERC20": [
            877
          ]
        },
        "id": 878,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 801,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "106:24:3"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "IERC20",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 802,
              "nodeType": "StructuredDocumentation",
              "src": "132:70:3",
              "text": " @dev Interface of the ERC20 standard as defined in the EIP."
            },
            "fullyImplemented": false,
            "id": 877,
            "linearizedBaseContracts": [
              877
            ],
            "name": "IERC20",
            "nameLocation": "213:6:3",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": {
                  "id": 803,
                  "nodeType": "StructuredDocumentation",
                  "src": "226:158:3",
                  "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                },
                "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                "id": 811,
                "name": "Transfer",
                "nameLocation": "395:8:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 810,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 805,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "420:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "404:20:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 804,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "404:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 807,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "442:2:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "426:18:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 806,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "426:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 809,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "454:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 811,
                      "src": "446:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 808,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "446:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "403:57:3"
                },
                "src": "389:72:3"
              },
              {
                "anonymous": false,
                "documentation": {
                  "id": 812,
                  "nodeType": "StructuredDocumentation",
                  "src": "467:148:3",
                  "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                },
                "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                "id": 820,
                "name": "Approval",
                "nameLocation": "626:8:3",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 819,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 814,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "651:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 820,
                      "src": "635:21:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 813,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "635:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 816,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "674:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 820,
                      "src": "658:23:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 815,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "658:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 818,
                      "indexed": false,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "691:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 820,
                      "src": "683:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 817,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "683:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "634:63:3"
                },
                "src": "620:78:3"
              },
              {
                "documentation": {
                  "id": 821,
                  "nodeType": "StructuredDocumentation",
                  "src": "704:65:3",
                  "text": " @dev Returns the value of tokens in existence."
                },
                "functionSelector": "18160ddd",
                "id": 826,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nameLocation": "783:11:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 822,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "794:2:3"
                },
                "returnParameters": {
                  "id": 825,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 824,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 826,
                      "src": "820:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 823,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "820:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "819:9:3"
                },
                "scope": 877,
                "src": "774:55:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 827,
                  "nodeType": "StructuredDocumentation",
                  "src": "835:71:3",
                  "text": " @dev Returns the value of tokens owned by `account`."
                },
                "functionSelector": "70a08231",
                "id": 834,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nameLocation": "920:9:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 830,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 829,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "938:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 834,
                      "src": "930:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 828,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "930:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "929:17:3"
                },
                "returnParameters": {
                  "id": 833,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 832,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 834,
                      "src": "970:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 831,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "970:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "969:9:3"
                },
                "scope": 877,
                "src": "911:68:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 835,
                  "nodeType": "StructuredDocumentation",
                  "src": "985:213:3",
                  "text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                },
                "functionSelector": "a9059cbb",
                "id": 844,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nameLocation": "1212:8:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 840,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 837,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "1229:2:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 844,
                      "src": "1221:10:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 836,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1221:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 839,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1241:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 844,
                      "src": "1233:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 838,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1233:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1220:27:3"
                },
                "returnParameters": {
                  "id": 843,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 842,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 844,
                      "src": "1266:4:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 841,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1266:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1265:6:3"
                },
                "scope": 877,
                "src": "1203:69:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 845,
                  "nodeType": "StructuredDocumentation",
                  "src": "1278:264:3",
                  "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                },
                "functionSelector": "dd62ed3e",
                "id": 854,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nameLocation": "1556:9:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 850,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 847,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "1574:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 854,
                      "src": "1566:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 846,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1566:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 849,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "1589:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 854,
                      "src": "1581:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 848,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1581:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1565:32:3"
                },
                "returnParameters": {
                  "id": 853,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 852,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 854,
                      "src": "1621:7:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 851,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1621:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1620:9:3"
                },
                "scope": 877,
                "src": "1547:83:3",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 855,
                  "nodeType": "StructuredDocumentation",
                  "src": "1636:667:3",
                  "text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                },
                "functionSelector": "095ea7b3",
                "id": 864,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nameLocation": "2317:7:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 860,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 857,
                      "mutability": "mutable",
                      "name": "spender",
                      "nameLocation": "2333:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 864,
                      "src": "2325:15:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 856,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2325:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 859,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "2350:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 864,
                      "src": "2342:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 858,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2342:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2324:32:3"
                },
                "returnParameters": {
                  "id": 863,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 862,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 864,
                      "src": "2375:4:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 861,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2375:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2374:6:3"
                },
                "scope": 877,
                "src": "2308:73:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 865,
                  "nodeType": "StructuredDocumentation",
                  "src": "2387:297:3",
                  "text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                },
                "functionSelector": "23b872dd",
                "id": 876,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nameLocation": "2698:12:3",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 872,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 867,
                      "mutability": "mutable",
                      "name": "from",
                      "nameLocation": "2719:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 876,
                      "src": "2711:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 866,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2711:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 869,
                      "mutability": "mutable",
                      "name": "to",
                      "nameLocation": "2733:2:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 876,
                      "src": "2725:10:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 868,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2725:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 871,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "2745:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 876,
                      "src": "2737:13:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 870,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2737:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2710:41:3"
                },
                "returnParameters": {
                  "id": 875,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 874,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 876,
                      "src": "2770:4:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 873,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2770:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2769:6:3"
                },
                "scope": 877,
                "src": "2689:87:3",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 878,
            "src": "203:2575:3",
            "usedErrors": [],
            "usedEvents": [
              811,
              820
            ]
          }
        ],
        "src": "106:2673:3"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "id": 4,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
        "exportedSymbols": {
          "Context": [
            979
          ],
          "ERC20": [
            799
          ],
          "ERC20Burnable": [
            923
          ]
        },
        "id": 924,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 879,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "124:24:4"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
            "file": "../ERC20.sol",
            "id": 881,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 924,
            "sourceUnit": 800,
            "src": "150:35:4",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 880,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 799,
                  "src": "158:5:4",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
            "file": "../../../utils/Context.sol",
            "id": 883,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 924,
            "sourceUnit": 980,
            "src": "186:51:4",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 882,
                  "name": "Context",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 979,
                  "src": "194:7:4",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": true,
            "baseContracts": [
              {
                "baseName": {
                  "id": 885,
                  "name": "Context",
                  "nameLocations": [
                    "483:7:4"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 979,
                  "src": "483:7:4"
                },
                "id": 886,
                "nodeType": "InheritanceSpecifier",
                "src": "483:7:4"
              },
              {
                "baseName": {
                  "id": 887,
                  "name": "ERC20",
                  "nameLocations": [
                    "492:5:4"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 799,
                  "src": "492:5:4"
                },
                "id": 888,
                "nodeType": "InheritanceSpecifier",
                "src": "492:5:4"
              }
            ],
            "canonicalName": "ERC20Burnable",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 884,
              "nodeType": "StructuredDocumentation",
              "src": "239:208:4",
              "text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
            },
            "fullyImplemented": true,
            "id": 923,
            "linearizedBaseContracts": [
              923,
              799,
              189,
              949,
              877,
              979
            ],
            "name": "ERC20Burnable",
            "nameLocation": "466:13:4",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 900,
                  "nodeType": "Block",
                  "src": "662:43:4",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 895,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 961,
                              "src": "678:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 896,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "678:12:4",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 897,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 891,
                            "src": "692:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 894,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 672,
                          "src": "672:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "672:26:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 899,
                      "nodeType": "ExpressionStatement",
                      "src": "672:26:4"
                    }
                  ]
                },
                "documentation": {
                  "id": 889,
                  "nodeType": "StructuredDocumentation",
                  "src": "504:109:4",
                  "text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
                },
                "functionSelector": "42966c68",
                "id": 901,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "burn",
                "nameLocation": "627:4:4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 892,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 891,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "640:5:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 901,
                      "src": "632:13:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 890,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "632:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "631:15:4"
                },
                "returnParameters": {
                  "id": 893,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "662:0:4"
                },
                "scope": 923,
                "src": "618:87:4",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 921,
                  "nodeType": "Block",
                  "src": "1086:93:4",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 910,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 904,
                            "src": "1112:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 911,
                              "name": "_msgSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 961,
                              "src": "1121:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 912,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1121:12:4",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 913,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 906,
                            "src": "1135:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 909,
                          "name": "_spendAllowance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "1096:15:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 914,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1096:45:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 915,
                      "nodeType": "ExpressionStatement",
                      "src": "1096:45:4"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 917,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 904,
                            "src": "1157:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 918,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 906,
                            "src": "1166:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 916,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 672,
                          "src": "1151:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 919,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1151:21:4",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 920,
                      "nodeType": "ExpressionStatement",
                      "src": "1151:21:4"
                    }
                  ]
                },
                "documentation": {
                  "id": 902,
                  "nodeType": "StructuredDocumentation",
                  "src": "711:305:4",
                  "text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
                },
                "functionSelector": "79cc6790",
                "id": 922,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "burnFrom",
                "nameLocation": "1030:8:4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 907,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 904,
                      "mutability": "mutable",
                      "name": "account",
                      "nameLocation": "1047:7:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 922,
                      "src": "1039:15:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 903,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1039:7:4",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 906,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1064:5:4",
                      "nodeType": "VariableDeclaration",
                      "scope": 922,
                      "src": "1056:13:4",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 905,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1056:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1038:32:4"
                },
                "returnParameters": {
                  "id": 908,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1086:0:4"
                },
                "scope": 923,
                "src": "1021:158:4",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              }
            ],
            "scope": 924,
            "src": "448:733:4",
            "usedErrors": [
              159,
              164,
              169,
              178,
              183,
              188
            ],
            "usedEvents": [
              811,
              820
            ]
          }
        ],
        "src": "124:1058:4"
      }
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "id": 5,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
        "exportedSymbols": {
          "IERC20": [
            877
          ],
          "IERC20Metadata": [
            949
          ]
        },
        "id": 950,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 925,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "125:24:5"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
            "file": "../IERC20.sol",
            "id": 927,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 950,
            "sourceUnit": 878,
            "src": "151:37:5",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 926,
                  "name": "IERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 877,
                  "src": "159:6:5",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 929,
                  "name": "IERC20",
                  "nameLocations": [
                    "305:6:5"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 877,
                  "src": "305:6:5"
                },
                "id": 930,
                "nodeType": "InheritanceSpecifier",
                "src": "305:6:5"
              }
            ],
            "canonicalName": "IERC20Metadata",
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": {
              "id": 928,
              "nodeType": "StructuredDocumentation",
              "src": "190:86:5",
              "text": " @dev Interface for the optional metadata functions from the ERC20 standard."
            },
            "fullyImplemented": false,
            "id": 949,
            "linearizedBaseContracts": [
              949,
              877
            ],
            "name": "IERC20Metadata",
            "nameLocation": "287:14:5",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "documentation": {
                  "id": 931,
                  "nodeType": "StructuredDocumentation",
                  "src": "318:54:5",
                  "text": " @dev Returns the name of the token."
                },
                "functionSelector": "06fdde03",
                "id": 936,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "name",
                "nameLocation": "386:4:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 932,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "390:2:5"
                },
                "returnParameters": {
                  "id": 935,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 934,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 936,
                      "src": "416:13:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 933,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "416:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "415:15:5"
                },
                "scope": 949,
                "src": "377:54:5",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 937,
                  "nodeType": "StructuredDocumentation",
                  "src": "437:56:5",
                  "text": " @dev Returns the symbol of the token."
                },
                "functionSelector": "95d89b41",
                "id": 942,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "symbol",
                "nameLocation": "507:6:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 938,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "513:2:5"
                },
                "returnParameters": {
                  "id": 941,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 940,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 942,
                      "src": "539:13:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 939,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "539:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "538:15:5"
                },
                "scope": 949,
                "src": "498:56:5",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "documentation": {
                  "id": 943,
                  "nodeType": "StructuredDocumentation",
                  "src": "560:65:5",
                  "text": " @dev Returns the decimals places of the token."
                },
                "functionSelector": "313ce567",
                "id": 948,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nameLocation": "639:8:5",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 944,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "647:2:5"
                },
                "returnParameters": {
                  "id": 947,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 946,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 948,
                      "src": "673:5:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 945,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "673:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "672:7:5"
                },
                "scope": 949,
                "src": "630:50:5",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 950,
            "src": "277:405:5",
            "usedErrors": [],
            "usedEvents": [
              811,
              820
            ]
          }
        ],
        "src": "125:558:5"
      }
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "id": 6,
      "ast": {
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
        "exportedSymbols": {
          "Context": [
            979
          ]
        },
        "id": 980,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 951,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".20"
            ],
            "nodeType": "PragmaDirective",
            "src": "101:24:6"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "canonicalName": "Context",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 952,
              "nodeType": "StructuredDocumentation",
              "src": "127:496:6",
              "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
            },
            "fullyImplemented": true,
            "id": 979,
            "linearizedBaseContracts": [
              979
            ],
            "name": "Context",
            "nameLocation": "642:7:6",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 960,
                  "nodeType": "Block",
                  "src": "718:34:6",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 957,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "735:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 958,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "739:6:6",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "735:10:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 956,
                      "id": 959,
                      "nodeType": "Return",
                      "src": "728:17:6"
                    }
                  ]
                },
                "id": 961,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgSender",
                "nameLocation": "665:10:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 953,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "675:2:6"
                },
                "returnParameters": {
                  "id": 956,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 955,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 961,
                      "src": "709:7:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 954,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "709:7:6",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "708:9:6"
                },
                "scope": 979,
                "src": "656:96:6",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 969,
                  "nodeType": "Block",
                  "src": "825:32:6",
                  "statements": [
                    {
                      "expression": {
                        "expression": {
                          "id": 966,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "842:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 967,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "846:4:6",
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "src": "842:8:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "functionReturnParameters": 965,
                      "id": 968,
                      "nodeType": "Return",
                      "src": "835:15:6"
                    }
                  ]
                },
                "id": 970,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgData",
                "nameLocation": "767:8:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 962,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "775:2:6"
                },
                "returnParameters": {
                  "id": 965,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 964,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 970,
                      "src": "809:14:6",
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_calldata_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 963,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "809:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "808:16:6"
                },
                "scope": 979,
                "src": "758:99:6",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 977,
                  "nodeType": "Block",
                  "src": "935:25:6",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "30",
                        "id": 975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "952:1:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "functionReturnParameters": 974,
                      "id": 976,
                      "nodeType": "Return",
                      "src": "945:8:6"
                    }
                  ]
                },
                "id": 978,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_contextSuffixLength",
                "nameLocation": "872:20:6",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 971,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "892:2:6"
                },
                "returnParameters": {
                  "id": 974,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 973,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 978,
                      "src": "926:7:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 972,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "926:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "925:9:6"
                },
                "scope": 979,
                "src": "863:97:6",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 980,
            "src": "624:338:6",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "101:862:6"
      }
    },
    "test/mocks/MockMoreDebtDSC.sol": {
      "id": 7,
      "ast": {
        "absolutePath": "test/mocks/MockMoreDebtDSC.sol",
        "exportedSymbols": {
          "ERC20": [
            799
          ],
          "ERC20Burnable": [
            923
          ],
          "MockMoreDebtDSC": [
            1102
          ],
          "MockV3Aggregator": [
            1295
          ],
          "Ownable": [
            147
          ]
        },
        "id": 1103,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 981,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "489:24:7"
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol",
            "file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
            "id": 984,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1103,
            "sourceUnit": 924,
            "src": "515:102:7",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 982,
                  "name": "ERC20Burnable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 923,
                  "src": "523:13:7",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              },
              {
                "foreign": {
                  "id": 983,
                  "name": "ERC20",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 799,
                  "src": "538:5:7",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
            "file": "@openzeppelin/contracts/access/Ownable.sol",
            "id": 986,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1103,
            "sourceUnit": 148,
            "src": "618:67:7",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 985,
                  "name": "Ownable",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 147,
                  "src": "626:7:7",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "absolutePath": "test/mocks/MockV3Aggregator.sol",
            "file": "./MockV3Aggregator.sol",
            "id": 988,
            "nameLocation": "-1:-1:-1",
            "nodeType": "ImportDirective",
            "scope": 1103,
            "sourceUnit": 1296,
            "src": "686:56:7",
            "symbolAliases": [
              {
                "foreign": {
                  "id": 987,
                  "name": "MockV3Aggregator",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1295,
                  "src": "694:16:7",
                  "typeDescriptions": {}
                },
                "nameLocation": "-1:-1:-1"
              }
            ],
            "unitAlias": ""
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "baseName": {
                  "id": 989,
                  "name": "ERC20Burnable",
                  "nameLocations": [
                    "1151:13:7"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 923,
                  "src": "1151:13:7"
                },
                "id": 990,
                "nodeType": "InheritanceSpecifier",
                "src": "1151:13:7"
              },
              {
                "baseName": {
                  "id": 991,
                  "name": "Ownable",
                  "nameLocations": [
                    "1166:7:7"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 147,
                  "src": "1166:7:7"
                },
                "id": 992,
                "nodeType": "InheritanceSpecifier",
                "src": "1166:7:7"
              }
            ],
            "canonicalName": "MockMoreDebtDSC",
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 1102,
            "linearizedBaseContracts": [
              1102,
              147,
              923,
              799,
              189,
              949,
              877,
              979
            ],
            "name": "MockMoreDebtDSC",
            "nameLocation": "1132:15:7",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "errorSelector": "ae8ba123",
                "id": 994,
                "name": "DecentralizedStableCoin__AmountMustBeMoreThanZero",
                "nameLocation": "1186:49:7",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 993,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1235:2:7"
                },
                "src": "1180:58:7"
              },
              {
                "errorSelector": "fe9c6abb",
                "id": 996,
                "name": "DecentralizedStableCoin__BurnAmountExceedsBalance",
                "nameLocation": "1249:49:7",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 995,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1298:2:7"
                },
                "src": "1243:58:7"
              },
              {
                "errorSelector": "f3c190e9",
                "id": 998,
                "name": "DecentralizedStableCoin__NotZeroAddress",
                "nameLocation": "1312:39:7",
                "nodeType": "ErrorDefinition",
                "parameters": {
                  "id": 997,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1351:2:7"
                },
                "src": "1306:48:7"
              },
              {
                "constant": false,
                "id": 1000,
                "mutability": "mutable",
                "name": "mockAggregator",
                "nameLocation": "1368:14:7",
                "nodeType": "VariableDeclaration",
                "scope": 1102,
                "src": "1360:22:7",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 999,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1360:7:7",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1017,
                  "nodeType": "Block",
                  "src": "1933:49:7",
                  "statements": [
                    {
                      "expression": {
                        "id": 1015,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1013,
                          "name": "mockAggregator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1000,
                          "src": "1943:14:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1014,
                          "name": "_mockAggregator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1002,
                          "src": "1960:15:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1943:32:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1016,
                      "nodeType": "ExpressionStatement",
                      "src": "1943:32:7"
                    }
                  ]
                },
                "id": 1018,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "hexValue": "446563656e7472616c697a6564537461626c65436f696e",
                        "id": 1005,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1879:25:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4c892af6da595460367c882173cb78937ab02fe25724e2f1d5f68069c7732cf8",
                          "typeString": "literal_string \"DecentralizedStableCoin\""
                        },
                        "value": "DecentralizedStableCoin"
                      },
                      {
                        "hexValue": "445343",
                        "id": 1006,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1906:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_43f14b70594ce2d8c53eb306c1e4efdb6729cfe75bf89574fb2d9f9db7c097df",
                          "typeString": "literal_string \"DSC\""
                        },
                        "value": "DSC"
                      }
                    ],
                    "id": 1007,
                    "kind": "baseConstructorSpecifier",
                    "modifierName": {
                      "id": 1004,
                      "name": "ERC20",
                      "nameLocations": [
                        "1873:5:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 799,
                      "src": "1873:5:7"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1873:39:7"
                  },
                  {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1009,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1921:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1010,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1925:6:7",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1921:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 1011,
                    "kind": "baseConstructorSpecifier",
                    "modifierName": {
                      "id": 1008,
                      "name": "Ownable",
                      "nameLocations": [
                        "1913:7:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 147,
                      "src": "1913:7:7"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1913:19:7"
                  }
                ],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1003,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1002,
                      "mutability": "mutable",
                      "name": "_mockAggregator",
                      "nameLocation": "1856:15:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1018,
                      "src": "1848:23:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1001,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1848:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1847:25:7"
                },
                "returnParameters": {
                  "id": 1012,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1933:0:7"
                },
                "scope": 1102,
                "src": "1836:146:7",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  901
                ],
                "body": {
                  "id": 1062,
                  "nodeType": "Block",
                  "src": "2045:398:7",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 1030,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2131:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "id": 1027,
                                "name": "mockAggregator",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1000,
                                "src": "2102:14:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1026,
                              "name": "MockV3Aggregator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1295,
                              "src": "2085:16:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_MockV3Aggregator_$1295_$",
                                "typeString": "type(contract MockV3Aggregator)"
                              }
                            },
                            "id": 1028,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2085:32:7",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MockV3Aggregator_$1295",
                              "typeString": "contract MockV3Aggregator"
                            }
                          },
                          "id": 1029,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2118:12:7",
                          "memberName": "updateAnswer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1182,
                          "src": "2085:45:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_int256_$returns$__$",
                            "typeString": "function (int256) external"
                          }
                        },
                        "id": 1031,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2085:48:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1032,
                      "nodeType": "ExpressionStatement",
                      "src": "2085:48:7"
                    },
                    {
                      "assignments": [
                        1034
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1034,
                          "mutability": "mutable",
                          "name": "balance",
                          "nameLocation": "2151:7:7",
                          "nodeType": "VariableDeclaration",
                          "scope": 1062,
                          "src": "2143:15:7",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1033,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2143:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "visibility": "internal"
                        }
                      ],
                      "id": 1039,
                      "initialValue": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1036,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2171:3:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1037,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2175:6:7",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2171:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1035,
                          "name": "balanceOf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 385,
                          "src": "2161:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view returns (uint256)"
                          }
                        },
                        "id": 1038,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2161:21:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2143:39:7"
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1042,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1040,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1020,
                          "src": "2196:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1041,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2207:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2196:12:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1047,
                      "nodeType": "IfStatement",
                      "src": "2192:101:7",
                      "trueBody": {
                        "id": 1046,
                        "nodeType": "Block",
                        "src": "2210:83:7",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1043,
                                "name": "DecentralizedStableCoin__AmountMustBeMoreThanZero",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 994,
                                "src": "2231:49:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 1044,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2231:51:7",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1045,
                            "nodeType": "RevertStatement",
                            "src": "2224:58:7"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1050,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1048,
                          "name": "balance",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1034,
                          "src": "2306:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 1049,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1020,
                          "src": "2316:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2306:17:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1055,
                      "nodeType": "IfStatement",
                      "src": "2302:106:7",
                      "trueBody": {
                        "id": 1054,
                        "nodeType": "Block",
                        "src": "2325:83:7",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1051,
                                "name": "DecentralizedStableCoin__BurnAmountExceedsBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 996,
                                "src": "2346:49:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 1052,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2346:51:7",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1053,
                            "nodeType": "RevertStatement",
                            "src": "2339:58:7"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1059,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1020,
                            "src": "2428:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1056,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -25,
                            "src": "2417:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_super$_MockMoreDebtDSC_$1102_$",
                              "typeString": "type(contract super MockMoreDebtDSC)"
                            }
                          },
                          "id": 1058,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2423:4:7",
                          "memberName": "burn",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 901,
                          "src": "2417:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2417:19:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1061,
                      "nodeType": "ExpressionStatement",
                      "src": "2417:19:7"
                    }
                  ]
                },
                "functionSelector": "42966c68",
                "id": 1063,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1024,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1023,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2035:9:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 58,
                      "src": "2035:9:7"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2035:9:7"
                  }
                ],
                "name": "burn",
                "nameLocation": "1997:4:7",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 1022,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "2026:8:7"
                },
                "parameters": {
                  "id": 1021,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1020,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nameLocation": "2010:7:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1063,
                      "src": "2002:15:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1019,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2002:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2001:17:7"
                },
                "returnParameters": {
                  "id": 1025,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2045:0:7"
                },
                "scope": 1102,
                "src": "1988:455:7",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1100,
                  "nodeType": "Block",
                  "src": "2527:272:7",
                  "statements": [
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1079,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1074,
                          "name": "_to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1065,
                          "src": "2541:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 1077,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2556:1:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1076,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2548:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 1075,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2548:7:7",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 1078,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2548:10:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2541:17:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1084,
                      "nodeType": "IfStatement",
                      "src": "2537:96:7",
                      "trueBody": {
                        "id": 1083,
                        "nodeType": "Block",
                        "src": "2560:73:7",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1080,
                                "name": "DecentralizedStableCoin__NotZeroAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 998,
                                "src": "2581:39:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 1081,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2581:41:7",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1082,
                            "nodeType": "RevertStatement",
                            "src": "2574:48:7"
                          }
                        ]
                      }
                    },
                    {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1087,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1085,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1067,
                          "src": "2646:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1086,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2657:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2646:12:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1092,
                      "nodeType": "IfStatement",
                      "src": "2642:101:7",
                      "trueBody": {
                        "id": 1091,
                        "nodeType": "Block",
                        "src": "2660:83:7",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1088,
                                "name": "DecentralizedStableCoin__AmountMustBeMoreThanZero",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 994,
                                "src": "2681:49:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 1089,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2681:51:7",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1090,
                            "nodeType": "RevertStatement",
                            "src": "2674:58:7"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1094,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1065,
                            "src": "2758:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1095,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1067,
                            "src": "2763:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1093,
                          "name": "_mint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 639,
                          "src": "2752:5:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1096,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2752:19:7",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1097,
                      "nodeType": "ExpressionStatement",
                      "src": "2752:19:7"
                    },
                    {
                      "expression": {
                        "hexValue": "74727565",
                        "id": 1098,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2788:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 1073,
                      "id": 1099,
                      "nodeType": "Return",
                      "src": "2781:11:7"
                    }
                  ]
                },
                "functionSelector": "40c10f19",
                "id": 1101,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "id": 1070,
                    "kind": "modifierInvocation",
                    "modifierName": {
                      "id": 1069,
                      "name": "onlyOwner",
                      "nameLocations": [
                        "2502:9:7"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 58,
                      "src": "2502:9:7"
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2502:9:7"
                  }
                ],
                "name": "mint",
                "nameLocation": "2458:4:7",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1068,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1065,
                      "mutability": "mutable",
                      "name": "_to",
                      "nameLocation": "2471:3:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1101,
                      "src": "2463:11:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1064,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2463:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1067,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nameLocation": "2484:7:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 1101,
                      "src": "2476:15:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1066,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2476:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2462:30:7"
                },
                "returnParameters": {
                  "id": 1073,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1072,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1101,
                      "src": "2521:4:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1071,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2521:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2520:6:7"
                },
                "scope": 1102,
                "src": "2449:350:7",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 1103,
            "src": "1123:1678:7",
            "usedErrors": [
              13,
              18,
              159,
              164,
              169,
              178,
              183,
              188,
              994,
              996,
              998
            ],
            "usedEvents": [
              24,
              811,
              820
            ]
          }
        ],
        "src": "489:2313:7"
      }
    },
    "test/mocks/MockV3Aggregator.sol": {
      "id": 8,
      "ast": {
        "absolutePath": "test/mocks/MockV3Aggregator.sol",
        "exportedSymbols": {
          "MockV3Aggregator": [
            1295
          ]
        },
        "id": 1296,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1104,
            "literals": [
              "solidity",
              "^",
              "0.8",
              ".0"
            ],
            "nodeType": "PragmaDirective",
            "src": "32:23:8"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "canonicalName": "MockV3Aggregator",
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 1105,
              "nodeType": "StructuredDocumentation",
              "src": "57:262:8",
              "text": " @title MockV3Aggregator\n @notice Based on the FluxAggregator contract\n @notice Use this contract when you need to test\n other contract's ability to read data from an\n aggregator contract, but how the aggregator got\n its answer is unimportant"
            },
            "fullyImplemented": true,
            "id": 1295,
            "linearizedBaseContracts": [
              1295
            ],
            "name": "MockV3Aggregator",
            "nameLocation": "329:16:8",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "functionSelector": "54fd4d50",
                "id": 1108,
                "mutability": "constant",
                "name": "version",
                "nameLocation": "376:7:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "352:35:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1106,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "352:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "hexValue": "30",
                  "id": 1107,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "386:1:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "313ce567",
                "id": 1110,
                "mutability": "mutable",
                "name": "decimals",
                "nameLocation": "407:8:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "394:21:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 1109,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "394:5:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "50d25bcd",
                "id": 1112,
                "mutability": "mutable",
                "name": "latestAnswer",
                "nameLocation": "435:12:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "421:26:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_int256",
                  "typeString": "int256"
                },
                "typeName": {
                  "id": 1111,
                  "name": "int256",
                  "nodeType": "ElementaryTypeName",
                  "src": "421:6:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_int256",
                    "typeString": "int256"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "8205bf6a",
                "id": 1114,
                "mutability": "mutable",
                "name": "latestTimestamp",
                "nameLocation": "468:15:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "453:30:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1113,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "453:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "668a0f02",
                "id": 1116,
                "mutability": "mutable",
                "name": "latestRound",
                "nameLocation": "504:11:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "489:26:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1115,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "489:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "b5ab58dc",
                "id": 1120,
                "mutability": "mutable",
                "name": "getAnswer",
                "nameLocation": "556:9:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "522:43:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                  "typeString": "mapping(uint256 => int256)"
                },
                "typeName": {
                  "id": 1119,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 1117,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "530:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "522:26:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                    "typeString": "mapping(uint256 => int256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 1118,
                    "name": "int256",
                    "nodeType": "ElementaryTypeName",
                    "src": "541:6:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_int256",
                      "typeString": "int256"
                    }
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "b633620c",
                "id": 1124,
                "mutability": "mutable",
                "name": "getTimestamp",
                "nameLocation": "606:12:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "571:47:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                  "typeString": "mapping(uint256 => uint256)"
                },
                "typeName": {
                  "id": 1123,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 1121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "579:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "571:27:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 1122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "590:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1128,
                "mutability": "mutable",
                "name": "getStartedAt",
                "nameLocation": "660:12:8",
                "nodeType": "VariableDeclaration",
                "scope": 1295,
                "src": "624:48:8",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                  "typeString": "mapping(uint256 => uint256)"
                },
                "typeName": {
                  "id": 1127,
                  "keyName": "",
                  "keyNameLocation": "-1:-1:-1",
                  "keyType": {
                    "id": 1125,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "632:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "624:27:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  },
                  "valueName": "",
                  "valueNameLocation": "-1:-1:-1",
                  "valueType": {
                    "id": 1126,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "643:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1143,
                  "nodeType": "Block",
                  "src": "731:75:8",
                  "statements": [
                    {
                      "expression": {
                        "id": 1137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1135,
                          "name": "decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1110,
                          "src": "741:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1136,
                          "name": "_decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1130,
                          "src": "752:9:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "src": "741:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "id": 1138,
                      "nodeType": "ExpressionStatement",
                      "src": "741:20:8"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "id": 1140,
                            "name": "_initialAnswer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1132,
                            "src": "784:14:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          ],
                          "id": 1139,
                          "name": "updateAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1182,
                          "src": "771:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_int256_$returns$__$",
                            "typeString": "function (int256)"
                          }
                        },
                        "id": 1141,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "771:28:8",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1142,
                      "nodeType": "ExpressionStatement",
                      "src": "771:28:8"
                    }
                  ]
                },
                "id": 1144,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nameLocation": "-1:-1:-1",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1133,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1130,
                      "mutability": "mutable",
                      "name": "_decimals",
                      "nameLocation": "697:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1144,
                      "src": "691:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1129,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "691:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1132,
                      "mutability": "mutable",
                      "name": "_initialAnswer",
                      "nameLocation": "715:14:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1144,
                      "src": "708:21:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 1131,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "708:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "690:40:8"
                },
                "returnParameters": {
                  "id": 1134,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "731:0:8"
                },
                "scope": 1295,
                "src": "679:127:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1181,
                  "nodeType": "Block",
                  "src": "857:253:8",
                  "statements": [
                    {
                      "expression": {
                        "id": 1151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1149,
                          "name": "latestAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1112,
                          "src": "867:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1150,
                          "name": "_answer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1146,
                          "src": "882:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "867:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 1152,
                      "nodeType": "ExpressionStatement",
                      "src": "867:22:8"
                    },
                    {
                      "expression": {
                        "id": 1156,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1153,
                          "name": "latestTimestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1114,
                          "src": "899:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 1154,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "917:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "923:9:8",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "917:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "899:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1157,
                      "nodeType": "ExpressionStatement",
                      "src": "899:33:8"
                    },
                    {
                      "expression": {
                        "id": 1159,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": false,
                        "src": "942:13:8",
                        "subExpression": {
                          "id": 1158,
                          "name": "latestRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1116,
                          "src": "942:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1160,
                      "nodeType": "ExpressionStatement",
                      "src": "942:13:8"
                    },
                    {
                      "expression": {
                        "id": 1165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1161,
                            "name": "getAnswer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "965:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                              "typeString": "mapping(uint256 => int256)"
                            }
                          },
                          "id": 1163,
                          "indexExpression": {
                            "id": 1162,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "975:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "965:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1164,
                          "name": "_answer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1146,
                          "src": "990:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "965:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 1166,
                      "nodeType": "ExpressionStatement",
                      "src": "965:32:8"
                    },
                    {
                      "expression": {
                        "id": 1172,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1167,
                            "name": "getTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1124,
                            "src": "1007:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1169,
                          "indexExpression": {
                            "id": 1168,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "1020:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1007:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 1170,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "1035:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1171,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1041:9:8",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "1035:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1007:43:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1173,
                      "nodeType": "ExpressionStatement",
                      "src": "1007:43:8"
                    },
                    {
                      "expression": {
                        "id": 1179,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1174,
                            "name": "getStartedAt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1128,
                            "src": "1060:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1176,
                          "indexExpression": {
                            "id": 1175,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "1073:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1060:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "expression": {
                            "id": 1177,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "1088:5:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1178,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1094:9:8",
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "1088:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1060:43:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1180,
                      "nodeType": "ExpressionStatement",
                      "src": "1060:43:8"
                    }
                  ]
                },
                "functionSelector": "a87a20ce",
                "id": 1182,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "updateAnswer",
                "nameLocation": "821:12:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1147,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1146,
                      "mutability": "mutable",
                      "name": "_answer",
                      "nameLocation": "841:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1182,
                      "src": "834:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 1145,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "834:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "833:16:8"
                },
                "returnParameters": {
                  "id": 1148,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "857:0:8"
                },
                "scope": 1295,
                "src": "812:298:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1223,
                  "nodeType": "Block",
                  "src": "1221:247:8",
                  "statements": [
                    {
                      "expression": {
                        "id": 1195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1193,
                          "name": "latestRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1116,
                          "src": "1231:11:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1194,
                          "name": "_roundId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1184,
                          "src": "1245:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint80",
                            "typeString": "uint80"
                          }
                        },
                        "src": "1231:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1196,
                      "nodeType": "ExpressionStatement",
                      "src": "1231:22:8"
                    },
                    {
                      "expression": {
                        "id": 1199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1197,
                          "name": "latestAnswer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1112,
                          "src": "1263:12:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1198,
                          "name": "_answer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1186,
                          "src": "1278:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "1263:22:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 1200,
                      "nodeType": "ExpressionStatement",
                      "src": "1263:22:8"
                    },
                    {
                      "expression": {
                        "id": 1203,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "id": 1201,
                          "name": "latestTimestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1114,
                          "src": "1295:15:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1202,
                          "name": "_timestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1188,
                          "src": "1313:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1295:28:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1204,
                      "nodeType": "ExpressionStatement",
                      "src": "1295:28:8"
                    },
                    {
                      "expression": {
                        "id": 1209,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1205,
                            "name": "getAnswer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1120,
                            "src": "1333:9:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                              "typeString": "mapping(uint256 => int256)"
                            }
                          },
                          "id": 1207,
                          "indexExpression": {
                            "id": 1206,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "1343:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1333:22:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1208,
                          "name": "_answer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1186,
                          "src": "1358:7:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "src": "1333:32:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "id": 1210,
                      "nodeType": "ExpressionStatement",
                      "src": "1333:32:8"
                    },
                    {
                      "expression": {
                        "id": 1215,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1211,
                            "name": "getTimestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1124,
                            "src": "1375:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1213,
                          "indexExpression": {
                            "id": 1212,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "1388:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1375:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1214,
                          "name": "_timestamp",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1188,
                          "src": "1403:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1375:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1216,
                      "nodeType": "ExpressionStatement",
                      "src": "1375:38:8"
                    },
                    {
                      "expression": {
                        "id": 1221,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "baseExpression": {
                            "id": 1217,
                            "name": "getStartedAt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1128,
                            "src": "1423:12:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 1219,
                          "indexExpression": {
                            "id": 1218,
                            "name": "latestRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1116,
                            "src": "1436:11:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1423:25:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "id": 1220,
                          "name": "_startedAt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1190,
                          "src": "1451:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1423:38:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1222,
                      "nodeType": "ExpressionStatement",
                      "src": "1423:38:8"
                    }
                  ]
                },
                "functionSelector": "4aa2011f",
                "id": 1224,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "updateRoundData",
                "nameLocation": "1125:15:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1191,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1184,
                      "mutability": "mutable",
                      "name": "_roundId",
                      "nameLocation": "1148:8:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1224,
                      "src": "1141:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1183,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1141:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1186,
                      "mutability": "mutable",
                      "name": "_answer",
                      "nameLocation": "1165:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1224,
                      "src": "1158:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 1185,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1158:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1188,
                      "mutability": "mutable",
                      "name": "_timestamp",
                      "nameLocation": "1182:10:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1224,
                      "src": "1174:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1187,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1174:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1190,
                      "mutability": "mutable",
                      "name": "_startedAt",
                      "nameLocation": "1202:10:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1224,
                      "src": "1194:18:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1189,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1194:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1140:73:8"
                },
                "returnParameters": {
                  "id": 1192,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1221:0:8"
                },
                "scope": 1295,
                "src": "1116:352:8",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1252,
                  "nodeType": "Block",
                  "src": "1657:113:8",
                  "statements": [
                    {
                      "expression": {
                        "components": [
                          {
                            "id": 1239,
                            "name": "_roundId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1226,
                            "src": "1675:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint80",
                              "typeString": "uint80"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1240,
                              "name": "getAnswer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1120,
                              "src": "1685:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                                "typeString": "mapping(uint256 => int256)"
                              }
                            },
                            "id": 1242,
                            "indexExpression": {
                              "id": 1241,
                              "name": "_roundId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1226,
                              "src": "1695:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint80",
                                "typeString": "uint80"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1685:19:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1243,
                              "name": "getStartedAt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1128,
                              "src": "1706:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1245,
                            "indexExpression": {
                              "id": 1244,
                              "name": "_roundId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1226,
                              "src": "1719:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint80",
                                "typeString": "uint80"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1706:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1246,
                              "name": "getTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1124,
                              "src": "1730:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1248,
                            "indexExpression": {
                              "id": 1247,
                              "name": "_roundId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1226,
                              "src": "1743:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint80",
                                "typeString": "uint80"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1730:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1249,
                            "name": "_roundId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1226,
                            "src": "1754:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint80",
                              "typeString": "uint80"
                            }
                          }
                        ],
                        "id": 1250,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1674:89:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                          "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                        }
                      },
                      "functionReturnParameters": 1238,
                      "id": 1251,
                      "nodeType": "Return",
                      "src": "1667:96:8"
                    }
                  ]
                },
                "functionSelector": "9a6fc8f5",
                "id": 1253,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getRoundData",
                "nameLocation": "1483:12:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1227,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1226,
                      "mutability": "mutable",
                      "name": "_roundId",
                      "nameLocation": "1503:8:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1496:15:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1225,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1496:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1495:17:8"
                },
                "returnParameters": {
                  "id": 1238,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1229,
                      "mutability": "mutable",
                      "name": "roundId",
                      "nameLocation": "1567:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1560:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1228,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1560:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1231,
                      "mutability": "mutable",
                      "name": "answer",
                      "nameLocation": "1583:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1576:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 1230,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1576:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1233,
                      "mutability": "mutable",
                      "name": "startedAt",
                      "nameLocation": "1599:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1591:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1232,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1591:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1235,
                      "mutability": "mutable",
                      "name": "updatedAt",
                      "nameLocation": "1618:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1610:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1234,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1610:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1237,
                      "mutability": "mutable",
                      "name": "answeredInRound",
                      "nameLocation": "1636:15:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1253,
                      "src": "1629:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1236,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1629:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1559:93:8"
                },
                "scope": 1295,
                "src": "1474:296:8",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1285,
                  "nodeType": "Block",
                  "src": "1947:214:8",
                  "statements": [
                    {
                      "expression": {
                        "components": [
                          {
                            "arguments": [
                              {
                                "id": 1268,
                                "name": "latestRound",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1116,
                                "src": "1985:11:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1267,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1978:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              },
                              "typeName": {
                                "id": 1266,
                                "name": "uint80",
                                "nodeType": "ElementaryTypeName",
                                "src": "1978:6:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1269,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1978:19:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint80",
                              "typeString": "uint80"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1270,
                              "name": "getAnswer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1120,
                              "src": "2011:9:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_int256_$",
                                "typeString": "mapping(uint256 => int256)"
                              }
                            },
                            "id": 1272,
                            "indexExpression": {
                              "id": 1271,
                              "name": "latestRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1116,
                              "src": "2021:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2011:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1273,
                              "name": "getStartedAt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1128,
                              "src": "2047:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1275,
                            "indexExpression": {
                              "id": 1274,
                              "name": "latestRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1116,
                              "src": "2060:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2047:25:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 1276,
                              "name": "getTimestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1124,
                              "src": "2086:12:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 1278,
                            "indexExpression": {
                              "id": 1277,
                              "name": "latestRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1116,
                              "src": "2099:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2086:25:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 1281,
                                "name": "latestRound",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1116,
                                "src": "2132:11:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1280,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2125:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint80_$",
                                "typeString": "type(uint80)"
                              },
                              "typeName": {
                                "id": 1279,
                                "name": "uint80",
                                "nodeType": "ElementaryTypeName",
                                "src": "2125:6:8",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1282,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2125:19:8",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint80",
                              "typeString": "uint80"
                            }
                          }
                        ],
                        "id": 1283,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1964:190:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_uint80_$_t_int256_$_t_uint256_$_t_uint256_$_t_uint80_$",
                          "typeString": "tuple(uint80,int256,uint256,uint256,uint80)"
                        }
                      },
                      "functionReturnParameters": 1265,
                      "id": 1284,
                      "nodeType": "Return",
                      "src": "1957:197:8"
                    }
                  ]
                },
                "functionSelector": "feaf968c",
                "id": 1286,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "latestRoundData",
                "nameLocation": "1785:15:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1254,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1800:2:8"
                },
                "returnParameters": {
                  "id": 1265,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1256,
                      "mutability": "mutable",
                      "name": "roundId",
                      "nameLocation": "1857:7:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "1850:14:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1255,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1850:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1258,
                      "mutability": "mutable",
                      "name": "answer",
                      "nameLocation": "1873:6:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "1866:13:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 1257,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1866:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1260,
                      "mutability": "mutable",
                      "name": "startedAt",
                      "nameLocation": "1889:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "1881:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1259,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1881:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1262,
                      "mutability": "mutable",
                      "name": "updatedAt",
                      "nameLocation": "1908:9:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "1900:17:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1261,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1900:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1264,
                      "mutability": "mutable",
                      "name": "answeredInRound",
                      "nameLocation": "1926:15:8",
                      "nodeType": "VariableDeclaration",
                      "scope": 1286,
                      "src": "1919:22:8",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint80",
                        "typeString": "uint80"
                      },
                      "typeName": {
                        "id": 1263,
                        "name": "uint80",
                        "nodeType": "ElementaryTypeName",
                        "src": "1919:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint80",
                          "typeString": "uint80"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "1849:93:8"
                },
                "scope": 1295,
                "src": "1776:385:8",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1293,
                  "nodeType": "Block",
                  "src": "2228:57:8",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "76302e362f74657374732f4d6f636b563341676772656761746f722e736f6c",
                        "id": 1291,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2245:33:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f07fb5b1ad79aac528cd96a1cc4b4ec6f7cefc63060a932b3b6750094ba19ff0",
                          "typeString": "literal_string \"v0.6/tests/MockV3Aggregator.sol\""
                        },
                        "value": "v0.6/tests/MockV3Aggregator.sol"
                      },
                      "functionReturnParameters": 1290,
                      "id": 1292,
                      "nodeType": "Return",
                      "src": "2238:40:8"
                    }
                  ]
                },
                "functionSelector": "7284e416",
                "id": 1294,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "description",
                "nameLocation": "2176:11:8",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1287,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2187:2:8"
                },
                "returnParameters": {
                  "id": 1290,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1289,
                      "mutability": "mutable",
                      "name": "",
                      "nameLocation": "-1:-1:-1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1294,
                      "src": "2213:13:8",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 1288,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2213:6:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "2212:15:8"
                },
                "scope": 1295,
                "src": "2167:118:8",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "external"
              }
            ],
            "scope": 1296,
            "src": "320:1967:8",
            "usedErrors": [],
            "usedEvents": []
          }
        ],
        "src": "32:2256:8"
      }
    }
  },
  "errors": [],
  "version": "0.8.24",
  "long_version": "0.8.24+commit.e11b9ed9.Linux.g++",
  "zk_version": "1.4.0"
}